// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace crmUGWorkflow.ProxyClasses
{
    [EntityLogicalNameAttribute("incident")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class incident : BaseProxyClass
    {
        public new const string LogicalName = "incident";
        public const int ObjectTypeCode = 112;
        public const string PrimaryIdAttribute = "incidentid";
        public const string PrimaryNameAttribute = "title";
        
        static incident()
        {
            BaseProxyClass.RegisterProxyType(typeof(incident), "incident");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public incident() : base(new Entity("incident")) { }
        public incident(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<incident>(); }

        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }

        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }

        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }

        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }

        private static Dictionary<string, eNumberOptions> _numberOptions;

        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }
        /// <summary>
        /// <para>Logical Name: accountid</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference accountid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("accountid");
            }
        }

        /// <summary>
        /// <para>Logical Name: accountidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("accountidname")]
        public string accountidname
        {
            get
            {
                return this.GetPropertyValue<string>("accountidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: accountidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("accountidyominame")]
        public string accountidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("accountidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: activitiescomplete</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("activitiescomplete")]
        public bool? activitiescomplete
        {
            get
            {
                return this.GetPropertyValue<bool?>("activitiescomplete");
            }
            set
            {
                this.SetPropertyValue<bool?>("activitiescomplete", value, "activitiescomplete");
            }
        }


        /// <summary>
        /// <para>Logical Name: actualserviceunits</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("actualserviceunits")]
        public int? actualserviceunits
        {
            get
            {
                return this.GetPropertyValue<int?>("actualserviceunits");
            }
            set
            {
                this.SetPropertyValue("actualserviceunits", (int?)value, (int)0, (int)1000000000, "actualserviceunits");
            }
        }

        /// <summary>
        /// <para>Logical Name: billedserviceunits</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("billedserviceunits")]
        public int? billedserviceunits
        {
            get
            {
                return this.GetPropertyValue<int?>("billedserviceunits");
            }
            set
            {
                this.SetPropertyValue("billedserviceunits", (int?)value, (int)0, (int)1000000000, "billedserviceunits");
            }
        }

        /// <summary>
        /// <para>Logical Name: blockedprofile</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("blockedprofile")]
        public bool? blockedprofile
        {
            get
            {
                return this.GetPropertyValue<bool?>("blockedprofile");
            }
            set
            {
                this.SetPropertyValue<bool?>("blockedprofile", value, "blockedprofile");
            }
        }


        /// <summary>
        /// Logical Name: caseorigincode
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public eIncident_caseorigincode? caseorigincode
        {
            get
            {
                if (caseorigincode_OptionSetValue != null) { return (eIncident_caseorigincode)caseorigincode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.caseorigincode_OptionSetValue = new OptionSetValue((int)value); }
                else this.caseorigincode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: caseorigincode</para>
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public OptionSetValue caseorigincode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("caseorigincode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("caseorigincode", value, "caseorigincode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string caseorigincode_Text(IOrganizationService service)
        {
            return this.caseorigincode_OptionSetValue.GetOptionSetText(service, this, "caseorigincode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string caseorigincode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.caseorigincode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: casetypecode
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public eIncident_casetypecode? casetypecode
        {
            get
            {
                if (casetypecode_OptionSetValue != null) { return (eIncident_casetypecode)casetypecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.casetypecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.casetypecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: casetypecode</para>
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public OptionSetValue casetypecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("casetypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("casetypecode", value, "casetypecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string casetypecode_Text(IOrganizationService service)
        {
            return this.casetypecode_OptionSetValue.GetOptionSetText(service, this, "casetypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string casetypecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.casetypecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: checkemail</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("checkemail")]
        public bool? checkemail
        {
            get
            {
                return this.GetPropertyValue<bool?>("checkemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("checkemail", value, "checkemail");
            }
        }


        /// <summary>
        /// <para>Logical Name: contactid</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference contactid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("contactid");
            }
        }

        /// <summary>
        /// <para>Logical Name: contactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contactidname")]
        public string contactidname
        {
            get
            {
                return this.GetPropertyValue<string>("contactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: contactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contactidyominame")]
        public string contactidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("contactidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: contractdetailid</para>
        /// </summary>
        [AttributeLogicalName("contractdetailid")]
        public EntityReference contractdetailid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("contractdetailid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("contractdetailid", value, "contractdetailid");
            }
        }

        /// <summary>
        /// <para>Logical Name: contractdetailidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contractdetailidname")]
        public string contractdetailidname
        {
            get
            {
                return this.GetPropertyValue<string>("contractdetailidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: contractid</para>
        /// </summary>
        [AttributeLogicalName("contractid")]
        public EntityReference contractid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("contractid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("contractid", value, "contractid");
            }
        }

        /// <summary>
        /// <para>Logical Name: contractidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contractidname")]
        public string contractidname
        {
            get
            {
                return this.GetPropertyValue<string>("contractidname");
            }
        }

        /// <summary>
        /// Logical Name: contractservicelevelcode
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public eIncident_contractservicelevelcode? contractservicelevelcode
        {
            get
            {
                if (contractservicelevelcode_OptionSetValue != null) { return (eIncident_contractservicelevelcode)contractservicelevelcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.contractservicelevelcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.contractservicelevelcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: contractservicelevelcode</para>
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public OptionSetValue contractservicelevelcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("contractservicelevelcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("contractservicelevelcode", value, "contractservicelevelcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string contractservicelevelcode_Text(IOrganizationService service)
        {
            return this.contractservicelevelcode_OptionSetValue.GetOptionSetText(service, this, "contractservicelevelcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string contractservicelevelcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.contractservicelevelcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: createdby</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference createdby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference createdbyexternalparty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string createdbyexternalpartyname
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyyominame")]
        public string createdbyexternalpartyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string createdbyname
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyyominame")]
        public string createdbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdon</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? createdon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("createdon");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference createdonbehalfby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyname")]
        public string createdonbehalfbyname
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyyominame")]
        public string createdonbehalfbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: customercontacted</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("customercontacted")]
        public bool? customercontacted
        {
            get
            {
                return this.GetPropertyValue<bool?>("customercontacted");
            }
            set
            {
                this.SetPropertyValue<bool?>("customercontacted", value, "customercontacted");
            }
        }


        /// <summary>
        /// <para>Logical Name: customerid</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference customerid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("customerid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("customerid", value, "customerid");
            }
        }

        /// <summary>
        /// <para>Logical Name: customeridname</para>
        /// <para>Max Length: 160 characters</para>
        /// </summary>
        [AttributeLogicalName("customeridname")]
        public string customeridname
        {
            get
            {
                return this.GetPropertyValue<string>("customeridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: customeridtype</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string customeridtype
        {
            get
            {
                return this.GetPropertyValue<string>("customeridtype");
            }
            set
            {
                this.SetPropertyValue<string>("customeridtype", value, "customeridtype");
            }
        }

        /// <summary>
        /// <para>Logical Name: customeridyominame</para>
        /// <para>Max Length: 450 characters</para>
        /// </summary>
        [AttributeLogicalName("customeridyominame")]
        public string customeridyominame
        {
            get
            {
                return this.GetPropertyValue<string>("customeridyominame");
            }
        }

        /// <summary>
        /// Logical Name: customersatisfactioncode
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public eIncident_customersatisfactioncode? customersatisfactioncode
        {
            get
            {
                if (customersatisfactioncode_OptionSetValue != null) { return (eIncident_customersatisfactioncode)customersatisfactioncode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.customersatisfactioncode_OptionSetValue = new OptionSetValue((int)value); }
                else this.customersatisfactioncode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: customersatisfactioncode</para>
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public OptionSetValue customersatisfactioncode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("customersatisfactioncode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("customersatisfactioncode", value, "customersatisfactioncode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string customersatisfactioncode_Text(IOrganizationService service)
        {
            return this.customersatisfactioncode_OptionSetValue.GetOptionSetText(service, this, "customersatisfactioncode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string customersatisfactioncode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.customersatisfactioncode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: decremententitlementterm</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("decremententitlementterm")]
        public bool? decremententitlementterm
        {
            get
            {
                return this.GetPropertyValue<bool?>("decremententitlementterm");
            }
            set
            {
                this.SetPropertyValue<bool?>("decremententitlementterm", value, "decremententitlementterm");
            }
        }


        /// <summary>
        /// <para>Logical Name: description</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string description
        {
            get
            {
                return this.GetPropertyValue<string>("description");
            }
            set
            {
                this.SetPropertyValue("description", value, 2000, "description");
            }
        }

        /// <summary>
        /// <para>Logical Name: emailaddress</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress")]
        public string emailaddress
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress");
            }
            set
            {
                this.SetPropertyValue("emailaddress", value, 100, "emailaddress");
            }
        }

        /// <summary>
        /// <para>Logical Name: entitlementid</para>
        /// </summary>
        [AttributeLogicalName("entitlementid")]
        public EntityReference entitlementid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("entitlementid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("entitlementid", value, "entitlementid");
            }
        }

        /// <summary>
        /// <para>Logical Name: entitlementidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("entitlementidname")]
        public string entitlementidname
        {
            get
            {
                return this.GetPropertyValue<string>("entitlementidname");
            }
        }


        /// <summary>
        /// <para>Logical Name: entityimage_timestamp</para>
        /// </summary>
        [AttributeLogicalName("entityimage_timestamp")]
        public int? entityimage_timestamp
        {
            get
            {
                return this.GetPropertyValue<int?>("entityimage_timestamp");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimage_url</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("entityimage_url")]
        public string entityimage_url
        {
            get
            {
                return this.GetPropertyValue<string>("entityimage_url");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimageid</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid entityimageid
        {
            get
            {
                return this.GetPropertyValue<Guid>("entityimageid");
            }
        }

        /// <summary>
        /// <para>Logical Name: escalatedon</para>
        /// </summary>
        [AttributeLogicalName("escalatedon")]
        public DateTime? escalatedon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("escalatedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: exchangerate</para>
        /// <para>Minimum Value: 0.0000000001</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 10</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? exchangerate
        {
            get
            {
                return this.GetPropertyValue<decimal?>("exchangerate");
            }
        }

        /// <summary>
        /// <para>Logical Name: existingcase</para>
        /// </summary>
        [AttributeLogicalName("existingcase")]
        public EntityReference existingcase
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("existingcase");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("existingcase", value, "existingcase");
            }
        }

        /// <summary>
        /// <para>Logical Name: firstresponsebykpiid</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiid")]
        public EntityReference firstresponsebykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("firstresponsebykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("firstresponsebykpiid", value, "firstresponsebykpiid");
            }
        }

        /// <summary>
        /// <para>Logical Name: firstresponsebykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiidname")]
        public string firstresponsebykpiidname
        {
            get
            {
                return this.GetPropertyValue<string>("firstresponsebykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: firstresponsesent</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("firstresponsesent")]
        public bool? firstresponsesent
        {
            get
            {
                return this.GetPropertyValue<bool?>("firstresponsesent");
            }
            set
            {
                this.SetPropertyValue<bool?>("firstresponsesent", value, "firstresponsesent");
            }
        }


        /// <summary>
        /// Logical Name: firstresponseslastatus
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public eIncident_firstresponseslastatus? firstresponseslastatus
        {
            get
            {
                if (firstresponseslastatus_OptionSetValue != null) { return (eIncident_firstresponseslastatus)firstresponseslastatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.firstresponseslastatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.firstresponseslastatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: firstresponseslastatus</para>
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public OptionSetValue firstresponseslastatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("firstresponseslastatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("firstresponseslastatus", value, "firstresponseslastatus_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string firstresponseslastatus_Text(IOrganizationService service)
        {
            return this.firstresponseslastatus_OptionSetValue.GetOptionSetText(service, this, "firstresponseslastatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string firstresponseslastatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.firstresponseslastatus_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: followupby</para>
        /// </summary>
        [AttributeLogicalName("followupby")]
        public DateTime? followupby
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("followupby");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("followupby", value, "followupby");
            }
        }

        /// <summary>
        /// <para>Logical Name: followuptaskcreated</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("followuptaskcreated")]
        public bool? followuptaskcreated
        {
            get
            {
                return this.GetPropertyValue<bool?>("followuptaskcreated");
            }
            set
            {
                this.SetPropertyValue<bool?>("followuptaskcreated", value, "followuptaskcreated");
            }
        }


        /// <summary>
        /// <para>Logical Name: importsequencenumber</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? importsequencenumber
        {
            get
            {
                return this.GetPropertyValue<int?>("importsequencenumber");
            }
            set
            {
                this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "importsequencenumber");
            }
        }

        /// <summary>
        /// <para>Key Property (Uniqueidentifier)</para>
        /// <para>Logical Name: incidentid</para>
        /// </summary>
        [AttributeLogicalName("incidentid")]
        public Guid incidentid
        {
            get
            {
                return base.Id;
            }
            set
            {
                base.Id = value;
                base.SetPropertyValue("incidentid", value, "incidentid");
            }
        }

        /// <summary>
        /// Logical Name: incidentstagecode
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public eIncident_incidentstagecode? incidentstagecode
        {
            get
            {
                if (incidentstagecode_OptionSetValue != null) { return (eIncident_incidentstagecode)incidentstagecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.incidentstagecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.incidentstagecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: incidentstagecode</para>
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public OptionSetValue incidentstagecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("incidentstagecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("incidentstagecode", value, "incidentstagecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string incidentstagecode_Text(IOrganizationService service)
        {
            return this.incidentstagecode_OptionSetValue.GetOptionSetText(service, this, "incidentstagecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string incidentstagecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.incidentstagecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: influencescore</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("influencescore")]
        public double? influencescore
        {
            get
            {
                return this.GetPropertyValue<double?>("influencescore");
            }
            set
            {
                this.SetPropertyValue("influencescore", (double?)value, (double)0, (double)1000000000, "influencescore");
            }
        }

        /// <summary>
        /// <para>Logical Name: isdecrementing</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("isdecrementing")]
        public bool? isdecrementing
        {
            get
            {
                return this.GetPropertyValue<bool?>("isdecrementing");
            }
            set
            {
                this.SetPropertyValue<bool?>("isdecrementing", value, "isdecrementing");
            }
        }


        /// <summary>
        /// <para>Logical Name: isescalated</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("isescalated")]
        public bool? isescalated
        {
            get
            {
                return this.GetPropertyValue<bool?>("isescalated");
            }
            set
            {
                this.SetPropertyValue<bool?>("isescalated", value, "isescalated");
            }
        }


        /// <summary>
        /// <para>Logical Name: kbarticleid</para>
        /// </summary>
        [AttributeLogicalName("kbarticleid")]
        public EntityReference kbarticleid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("kbarticleid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("kbarticleid", value, "kbarticleid");
            }
        }

        /// <summary>
        /// <para>Logical Name: kbarticleidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("kbarticleidname")]
        public string kbarticleidname
        {
            get
            {
                return this.GetPropertyValue<string>("kbarticleidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: lastonholdtime</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? lastonholdtime
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("lastonholdtime");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("lastonholdtime", value, "lastonholdtime");
            }
        }

        /// <summary>
        /// <para>Logical Name: masterid</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference masterid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("masterid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("masterid", value, "masterid");
            }
        }

        /// <summary>
        /// <para>Logical Name: masteridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("masteridname")]
        public string masteridname
        {
            get
            {
                return this.GetPropertyValue<string>("masteridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: merged</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? merged
        {
            get
            {
                return this.GetPropertyValue<bool?>("merged");
            }
        }


        /// <summary>
        /// Logical Name: messagetypecode
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public eSocialactivity_postmessagetype? messagetypecode
        {
            get
            {
                if (messagetypecode_OptionSetValue != null) { return (eSocialactivity_postmessagetype)messagetypecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.messagetypecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.messagetypecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: messagetypecode</para>
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public OptionSetValue messagetypecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("messagetypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("messagetypecode", value, "messagetypecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string messagetypecode_Text(IOrganizationService service)
        {
            return this.messagetypecode_OptionSetValue.GetOptionSetText(service, this, "messagetypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string messagetypecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.messagetypecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: modifiedby</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference modifiedby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference modifiedbyexternalparty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string modifiedbyexternalpartyname
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyyominame")]
        public string modifiedbyexternalpartyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string modifiedbyname
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyyominame")]
        public string modifiedbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedon</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? modifiedon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("modifiedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference modifiedonbehalfby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string modifiedonbehalfbyname
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        public string modifiedonbehalfbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: numberofchildincidents</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("numberofchildincidents")]
        public int? numberofchildincidents
        {
            get
            {
                return this.GetPropertyValue<int?>("numberofchildincidents");
            }
        }

        /// <summary>
        /// <para>Logical Name: onholdtime</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? onholdtime
        {
            get
            {
                return this.GetPropertyValue<int?>("onholdtime");
            }
        }

        /// <summary>
        /// <para>Logical Name: overriddencreatedon</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? overriddencreatedon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("overriddencreatedon");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "overriddencreatedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: ownerid</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference ownerid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("ownerid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("ownerid", value, "ownerid");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string owneridname
        {
            get
            {
                return this.GetPropertyValue<string>("owneridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridtype</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string owneridtype
        {
            get
            {
                return this.GetPropertyValue<string>("owneridtype");
            }
            set
            {
                this.SetPropertyValue<string>("owneridtype", value, "owneridtype");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridyominame")]
        public string owneridyominame
        {
            get
            {
                return this.GetPropertyValue<string>("owneridyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: owningbusinessunit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference owningbusinessunit
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningbusinessunit");
            }
        }

        /// <summary>
        /// <para>Logical Name: owningteam</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference owningteam
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningteam");
            }
        }

        /// <summary>
        /// <para>Logical Name: owninguser</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference owninguser
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owninguser");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentcaseid</para>
        /// </summary>
        [AttributeLogicalName("parentcaseid")]
        public EntityReference parentcaseid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("parentcaseid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("parentcaseid", value, "parentcaseid");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentcaseidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("parentcaseidname")]
        public string parentcaseidname
        {
            get
            {
                return this.GetPropertyValue<string>("parentcaseidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactid</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference primarycontactid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("primarycontactid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("primarycontactid", value, "primarycontactid");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidname")]
        public string primarycontactidname
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidyominame")]
        public string primarycontactidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidyominame");
            }
        }

        /// <summary>
        /// Logical Name: prioritycode
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public eIncident_prioritycode? prioritycode
        {
            get
            {
                if (prioritycode_OptionSetValue != null) { return (eIncident_prioritycode)prioritycode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.prioritycode_OptionSetValue = new OptionSetValue((int)value); }
                else this.prioritycode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: prioritycode</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public OptionSetValue prioritycode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("prioritycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("prioritycode", value, "prioritycode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string prioritycode_Text(IOrganizationService service)
        {
            return this.prioritycode_OptionSetValue.GetOptionSetText(service, this, "prioritycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string prioritycode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.prioritycode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: processid</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid processid
        {
            get
            {
                return this.GetPropertyValue<Guid>("processid");
            }
            set
            {
                this.SetPropertyValue<Guid>("processid", value, "processid");
            }
        }

        /// <summary>
        /// <para>Logical Name: productid</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public EntityReference productid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("productid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("productid", value, "productid");
            }
        }

        /// <summary>
        /// <para>Logical Name: productidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("productidname")]
        public string productidname
        {
            get
            {
                return this.GetPropertyValue<string>("productidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: productserialnumber</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("productserialnumber")]
        public string productserialnumber
        {
            get
            {
                return this.GetPropertyValue<string>("productserialnumber");
            }
            set
            {
                this.SetPropertyValue("productserialnumber", value, 100, "productserialnumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: resolveby</para>
        /// </summary>
        [AttributeLogicalName("resolveby")]
        public DateTime? resolveby
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("resolveby");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("resolveby", value, "resolveby");
            }
        }

        /// <summary>
        /// <para>Logical Name: resolvebykpiid</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiid")]
        public EntityReference resolvebykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("resolvebykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("resolvebykpiid", value, "resolvebykpiid");
            }
        }

        /// <summary>
        /// <para>Logical Name: resolvebykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiidname")]
        public string resolvebykpiidname
        {
            get
            {
                return this.GetPropertyValue<string>("resolvebykpiidname");
            }
        }

        /// <summary>
        /// Logical Name: resolvebyslastatus
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public eIncident_resolvebyslastatus? resolvebyslastatus
        {
            get
            {
                if (resolvebyslastatus_OptionSetValue != null) { return (eIncident_resolvebyslastatus)resolvebyslastatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.resolvebyslastatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.resolvebyslastatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: resolvebyslastatus</para>
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public OptionSetValue resolvebyslastatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("resolvebyslastatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("resolvebyslastatus", value, "resolvebyslastatus_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string resolvebyslastatus_Text(IOrganizationService service)
        {
            return this.resolvebyslastatus_OptionSetValue.GetOptionSetText(service, this, "resolvebyslastatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string resolvebyslastatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.resolvebyslastatus_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: responseby</para>
        /// </summary>
        [AttributeLogicalName("responseby")]
        public DateTime? responseby
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("responseby");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("responseby", value, "responseby");
            }
        }

        /// <summary>
        /// <para>Logical Name: responsiblecontactid</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactid")]
        public EntityReference responsiblecontactid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("responsiblecontactid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("responsiblecontactid", value, "responsiblecontactid");
            }
        }

        /// <summary>
        /// <para>Logical Name: responsiblecontactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactidname")]
        public string responsiblecontactidname
        {
            get
            {
                return this.GetPropertyValue<string>("responsiblecontactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: responsiblecontactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactidyominame")]
        public string responsiblecontactidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("responsiblecontactidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: routecase</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("routecase")]
        public bool? routecase
        {
            get
            {
                return this.GetPropertyValue<bool?>("routecase");
            }
            set
            {
                this.SetPropertyValue<bool?>("routecase", value, "routecase");
            }
        }


        /// <summary>
        /// <para>Logical Name: sentimentvalue</para>
        /// <para>Minimum Value: -100000000000</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("sentimentvalue")]
        public double? sentimentvalue
        {
            get
            {
                return this.GetPropertyValue<double?>("sentimentvalue");
            }
            set
            {
                this.SetPropertyValue("sentimentvalue", (double?)value, (double)-100000000000, (double)100000000000, "sentimentvalue");
            }
        }

        /// <summary>
        /// Logical Name: servicestage
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public eServicestage? servicestage
        {
            get
            {
                if (servicestage_OptionSetValue != null) { return (eServicestage)servicestage_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.servicestage_OptionSetValue = new OptionSetValue((int)value); }
                else this.servicestage_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: servicestage</para>
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public OptionSetValue servicestage_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("servicestage");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("servicestage", value, "servicestage_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string servicestage_Text(IOrganizationService service)
        {
            return this.servicestage_OptionSetValue.GetOptionSetText(service, this, "servicestage");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string servicestage_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.servicestage_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: severitycode
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public eIncident_severitycode? severitycode
        {
            get
            {
                if (severitycode_OptionSetValue != null) { return (eIncident_severitycode)severitycode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.severitycode_OptionSetValue = new OptionSetValue((int)value); }
                else this.severitycode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: severitycode</para>
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public OptionSetValue severitycode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("severitycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("severitycode", value, "severitycode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string severitycode_Text(IOrganizationService service)
        {
            return this.severitycode_OptionSetValue.GetOptionSetText(service, this, "severitycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string severitycode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.severitycode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: slaid</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference slaid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slaid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("slaid", value, "slaid");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedid</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference slainvokedid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slainvokedid");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slainvokedidname")]
        public string slainvokedidname
        {
            get
            {
                return this.GetPropertyValue<string>("slainvokedidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: slaname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slaname")]
        public string slaname
        {
            get
            {
                return this.GetPropertyValue<string>("slaname");
            }
        }

        /// <summary>
        /// <para>Logical Name: socialprofileid</para>
        /// </summary>
        [AttributeLogicalName("socialprofileid")]
        public EntityReference socialprofileid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("socialprofileid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("socialprofileid", value, "socialprofileid");
            }
        }

        /// <summary>
        /// <para>Logical Name: socialprofileidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("socialprofileidname")]
        public string socialprofileidname
        {
            get
            {
                return this.GetPropertyValue<string>("socialprofileidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: stageid</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid stageid
        {
            get
            {
                return this.GetPropertyValue<Guid>("stageid");
            }
            set
            {
                this.SetPropertyValue<Guid>("stageid", value, "stageid");
            }
        }

        /// <summary>
        /// Logical Name: statecode
        /// </summary>
        [AttributeLogicalName("statecode")]
        public eIncident_statecode? statecode
        {
            get
            {
                if (statecode_OptionSetValue != null) { return (eIncident_statecode)statecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.statecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.statecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statecode</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OptionSetValue statecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statecode", value, "statecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string statecode_Text(IOrganizationService service)
        {
            return this.statecode_OptionSetValue.GetOptionSetText(service, this, "statecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string statecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.statecode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: statuscode
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public eIncident_statuscode? statuscode
        {
            get
            {
                if (statuscode_OptionSetValue != null) { return (eIncident_statuscode)statuscode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.statuscode_OptionSetValue = new OptionSetValue((int)value); }
                else this.statuscode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statuscode</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OptionSetValue statuscode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statuscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statuscode", value, "statuscode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string statuscode_Text(IOrganizationService service)
        {
            return this.statuscode_OptionSetValue.GetOptionSetText(service, this, "statuscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string statuscode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.statuscode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: subjectid</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference subjectid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("subjectid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("subjectid", value, "subjectid");
            }
        }

        /// <summary>
        /// <para>Logical Name: subjectidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("subjectidname")]
        public string subjectidname
        {
            get
            {
                return this.GetPropertyValue<string>("subjectidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: ticketnumber</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("ticketnumber")]
        public string ticketnumber
        {
            get
            {
                return this.GetPropertyValue<string>("ticketnumber");
            }
            set
            {
                this.SetPropertyValue("ticketnumber", value, 100, "ticketnumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: timezoneruleversionnumber</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? timezoneruleversionnumber
        {
            get
            {
                return this.GetPropertyValue<int?>("timezoneruleversionnumber");
            }
            set
            {
                this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "timezoneruleversionnumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: title</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string title
        {
            get
            {
                return this.GetPropertyValue<string>("title");
            }
            set
            {
                this.SetPropertyValue("title", value, 200, "title");
            }
        }

        /// <summary>
        /// <para>Logical Name: transactioncurrencyid</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference transactioncurrencyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("transactioncurrencyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "transactioncurrencyid");
            }
        }

        /// <summary>
        /// <para>Logical Name: transactioncurrencyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyidname")]
        public string transactioncurrencyidname
        {
            get
            {
                return this.GetPropertyValue<string>("transactioncurrencyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: traversedpath</para>
        /// <para>Max Length: 1250 characters</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string traversedpath
        {
            get
            {
                return this.GetPropertyValue<string>("traversedpath");
            }
            set
            {
                this.SetPropertyValue("traversedpath", value, 1250, "traversedpath");
            }
        }

        /// <summary>
        /// <para>Logical Name: utcconversiontimezonecode</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? utcconversiontimezonecode
        {
            get
            {
                return this.GetPropertyValue<int?>("utcconversiontimezonecode");
            }
            set
            {
                this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "utcconversiontimezonecode");
            }
        }

        /// <summary>
        /// <para>Logical Name: versionnumber</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public int? versionnumber
        {
            get
            {
                return this.GetPropertyValue<int?>("versionnumber");
            }
        }


        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_actioncard</para>
        /// </summary>
        public List<Entity> Getincident_actioncard(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_actioncard</para>
        /// </summary>
        public List<Entity> Getincident_actioncard(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_activity_parties</para>
        /// </summary>
        public List<Entity> Getincident_activity_parties(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_activity_parties</para>
        /// </summary>
        public List<Entity> Getincident_activity_parties(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetIncident_ActivityPointers(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetIncident_ActivityPointers(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Annotation</para>
        /// </summary>
        public List<Entity> GetIncident_Annotation(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Annotation</para>
        /// </summary>
        public List<Entity> GetIncident_Annotation(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Appointments</para>
        /// </summary>
        public List<Entity> GetIncident_Appointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Appointments</para>
        /// </summary>
        public List<Entity> GetIncident_Appointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetIncident_AsyncOperations(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetIncident_AsyncOperations(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetIncident_BulkDeleteFailures(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetIncident_BulkDeleteFailures(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_connections1</para>
        /// </summary>
        public List<Entity> Getincident_connections1(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_connections1</para>
        /// </summary>
        public List<Entity> Getincident_connections1(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_connections2</para>
        /// </summary>
        public List<Entity> Getincident_connections2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_connections2</para>
        /// </summary>
        public List<Entity> Getincident_connections2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateBaseRecord(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateBaseRecord(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateMatchingRecord(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateMatchingRecord(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Emails</para>
        /// </summary>
        public List<Entity> GetIncident_Emails(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Emails</para>
        /// </summary>
        public List<Entity> GetIncident_Emails(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Faxes</para>
        /// </summary>
        public List<Entity> GetIncident_Faxes(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Faxes</para>
        /// </summary>
        public List<Entity> GetIncident_Faxes(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>incident (Existing Case)</b></para>
        /// <para>Schema Name: incident_existingcase</para>
        /// </summary>
        public List<incident> Getincident_existingcase(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "existingcase", columns); }

        /// <summary>
        /// <para><b>incident (Existing Case)</b></para>
        /// <para>Schema Name: incident_existingcase</para>
        /// </summary>
        public List<incident> Getincident_existingcase(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "existingcase", columns); }

        /// <summary>
        /// <para><b>incident (Master Case)</b></para>
        /// <para>Schema Name: incident_master_incident</para>
        /// </summary>
        public List<incident> Getincident_master_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "masterid", columns); }

        /// <summary>
        /// <para><b>incident (Master Case)</b></para>
        /// <para>Schema Name: incident_master_incident</para>
        /// </summary>
        public List<incident> Getincident_master_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "masterid", columns); }

        /// <summary>
        /// <para><b>incident (Parent Case)</b></para>
        /// <para>Schema Name: incident_parent_incident</para>
        /// </summary>
        public List<incident> Getincident_parent_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "parentcaseid", columns); }

        /// <summary>
        /// <para><b>incident (Parent Case)</b></para>
        /// <para>Schema Name: incident_parent_incident</para>
        /// </summary>
        public List<incident> Getincident_parent_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "parentcaseid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_IncidentResolutions</para>
        /// </summary>
        public List<Entity> GetIncident_IncidentResolutions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incidentresolution", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_IncidentResolutions</para>
        /// </summary>
        public List<Entity> GetIncident_IncidentResolutions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incidentresolution", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: knowledgearticle_incidents</para>
        /// </summary>
        public List<Entity> Getknowledgearticle_incidents(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "knowledgearticleincident", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: knowledgearticle_incidents</para>
        /// </summary>
        public List<Entity> Getknowledgearticle_incidents(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "knowledgearticleincident", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: OriginatingCase_Lead</para>
        /// </summary>
        public List<Entity> GetOriginatingCase_Lead(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "originatingcaseid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: OriginatingCase_Lead</para>
        /// </summary>
        public List<Entity> GetOriginatingCase_Lead(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "originatingcaseid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Letters</para>
        /// </summary>
        public List<Entity> GetIncident_Letters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Letters</para>
        /// </summary>
        public List<Entity> GetIncident_Letters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_li_inmails</para>
        /// </summary>
        public List<Entity> Getincident_li_inmails(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_inmail", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_li_inmails</para>
        /// </summary>
        public List<Entity> Getincident_li_inmails(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_inmail", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_li_messages</para>
        /// </summary>
        public List<Entity> Getincident_li_messages(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_message", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_li_messages</para>
        /// </summary>
        public List<Entity> Getincident_li_messages(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_message", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_li_pointdrivepresentationvieweds</para>
        /// </summary>
        public List<Entity> Getincident_li_pointdrivepresentationvieweds(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_pointdrivepresentationviewed", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_li_pointdrivepresentationvieweds</para>
        /// </summary>
        public List<Entity> Getincident_li_pointdrivepresentationvieweds(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_pointdrivepresentationviewed", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetIncident_MailboxTrackingFolder(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetIncident_MailboxTrackingFolder(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_msfp_surveyinvites</para>
        /// </summary>
        public List<Entity> Getincident_msfp_surveyinvites(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyinvite", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_msfp_surveyinvites</para>
        /// </summary>
        public List<Entity> Getincident_msfp_surveyinvites(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyinvite", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_msfp_surveyresponses</para>
        /// </summary>
        public List<Entity> Getincident_msfp_surveyresponses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyresponse", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_msfp_surveyresponses</para>
        /// </summary>
        public List<Entity> Getincident_msfp_surveyresponses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyresponse", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_OpportunityCloses</para>
        /// </summary>
        public List<Entity> Getincident_OpportunityCloses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunityclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_OpportunityCloses</para>
        /// </summary>
        public List<Entity> Getincident_OpportunityCloses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunityclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_OrderCloses</para>
        /// </summary>
        public List<Entity> Getincident_OrderCloses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "orderclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_OrderCloses</para>
        /// </summary>
        public List<Entity> Getincident_OrderCloses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "orderclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Phonecalls</para>
        /// </summary>
        public List<Entity> GetIncident_Phonecalls(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Phonecalls</para>
        /// </summary>
        public List<Entity> GetIncident_Phonecalls(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lk_phonetocaseprocess_incidentid</para>
        /// </summary>
        public List<Entity> Getlk_phonetocaseprocess_incidentid(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonetocaseprocess", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lk_phonetocaseprocess_incidentid</para>
        /// </summary>
        public List<Entity> Getlk_phonetocaseprocess_incidentid(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonetocaseprocess", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_PostFollows</para>
        /// </summary>
        public List<Entity> Getincident_PostFollows(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_PostFollows</para>
        /// </summary>
        public List<Entity> Getincident_PostFollows(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_PostRegardings</para>
        /// </summary>
        public List<Entity> Getincident_PostRegardings(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_PostRegardings</para>
        /// </summary>
        public List<Entity> Getincident_PostRegardings(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_PostRoles</para>
        /// </summary>
        public List<Entity> Getincident_PostRoles(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_PostRoles</para>
        /// </summary>
        public List<Entity> Getincident_PostRoles(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> Getincident_principalobjectattributeaccess(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> Getincident_principalobjectattributeaccess(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetIncident_ProcessSessions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetIncident_ProcessSessions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_QueueItem</para>
        /// </summary>
        public List<Entity> GetIncident_QueueItem(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "queueitem", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_QueueItem</para>
        /// </summary>
        public List<Entity> GetIncident_QueueItem(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "queueitem", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_QuoteCloses</para>
        /// </summary>
        public List<Entity> Getincident_QuoteCloses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quoteclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_QuoteCloses</para>
        /// </summary>
        public List<Entity> Getincident_QuoteCloses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quoteclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetIncident_RecurringAppointmentMasters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetIncident_RecurringAppointmentMasters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetIncident_ServiceAppointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetIncident_ServiceAppointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: slakpiinstance_incident</para>
        /// </summary>
        public List<Entity> Getslakpiinstance_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: slakpiinstance_incident</para>
        /// </summary>
        public List<Entity> Getslakpiinstance_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_SocialActivities</para>
        /// </summary>
        public List<Entity> GetIncident_SocialActivities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_SocialActivities</para>
        /// </summary>
        public List<Entity> GetIncident_SocialActivities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_SyncErrors</para>
        /// </summary>
        public List<Entity> GetIncident_SyncErrors(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_SyncErrors</para>
        /// </summary>
        public List<Entity> GetIncident_SyncErrors(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Tasks</para>
        /// </summary>
        public List<Entity> GetIncident_Tasks(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Incident_Tasks</para>
        /// </summary>
        public List<Entity> GetIncident_Tasks(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_topic</para>
        /// </summary>
        public List<Entity> Getincident_topic(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "topic", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: incident_topic</para>
        /// </summary>
        public List<Entity> Getincident_topic(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "topic", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: userentityinstancedata_incident</para>
        /// </summary>
        public List<Entity> Getuserentityinstancedata_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: userentityinstancedata_incident</para>
        /// </summary>
        public List<Entity> Getuserentityinstancedata_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }


        /// <summary>
        /// <para>Related Entity: <b>Knowledge Base Record</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: KnowledgeBaseRecord_Incident</para>
        /// </summary>
        public List<Entity> GetKnowledgeBaseRecord_Incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "incident", "incidentid", "knowledgebaserecord", "knowledgebaserecordid", "incidentknowledgebaserecord", "incidentid", "knowledgebaserecordid", columns); }
        public List<Entity> GetKnowledgeBaseRecord_Incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "incident", "incidentid", "knowledgebaserecord", "knowledgebaserecordid", "incidentknowledgebaserecord", "incidentid", "knowledgebaserecordid", columns); }
        public void RelateKnowledgeBaseRecord_Incident(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "KnowledgeBaseRecord_Incident", items); }
        public void RelateKnowledgeBaseRecord_Incident(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "KnowledgeBaseRecord_Incident", items); }
        public void UnRelateKnowledgeBaseRecord_Incident(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "KnowledgeBaseRecord_Incident", items); }
        public void UnRelateKnowledgeBaseRecord_Incident(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "KnowledgeBaseRecord_Incident", items); }

        
        
        public static class Properties
        {
            /// <summary>
            /// <para>Account</para>
            /// <para>Logical Name = accountid</para>
            /// </summary>
            public const string accountid = "accountid";

            /// <summary>
            /// <para>Logical Name = accountidname</para>
            /// </summary>
            public const string accountidname = "accountidname";

            /// <summary>
            /// <para>Logical Name = accountidyominame</para>
            /// </summary>
            public const string accountidyominame = "accountidyominame";

            /// <summary>
            /// <para>Activities Complete</para>
            /// <para>Logical Name = activitiescomplete</para>
            /// </summary>
            public const string activitiescomplete = "activitiescomplete";

            /// <summary>
            /// <para>Logical Name = activitiescompletename</para>
            /// </summary>
            public const string activitiescompletename = "activitiescompletename";

            /// <summary>
            /// <para>Actual Service Units</para>
            /// <para>Logical Name = actualserviceunits</para>
            /// </summary>
            public const string actualserviceunits = "actualserviceunits";

            /// <summary>
            /// <para>Billed Service Units</para>
            /// <para>Logical Name = billedserviceunits</para>
            /// </summary>
            public const string billedserviceunits = "billedserviceunits";

            /// <summary>
            /// <para>Blocked Profile</para>
            /// <para>Logical Name = blockedprofile</para>
            /// </summary>
            public const string blockedprofile = "blockedprofile";

            /// <summary>
            /// <para>Logical Name = blockedprofilename</para>
            /// </summary>
            public const string blockedprofilename = "blockedprofilename";

            /// <summary>
            /// <para>Origin</para>
            /// <para>Logical Name = caseorigincode</para>
            /// </summary>
            public const string caseorigincode = "caseorigincode";

            /// <summary>
            /// <para>Logical Name = caseorigincodename</para>
            /// </summary>
            public const string caseorigincodename = "caseorigincodename";

            /// <summary>
            /// <para>Case Type</para>
            /// <para>Logical Name = casetypecode</para>
            /// </summary>
            public const string casetypecode = "casetypecode";

            /// <summary>
            /// <para>Logical Name = casetypecodename</para>
            /// </summary>
            public const string casetypecodename = "casetypecodename";

            /// <summary>
            /// <para>Check Email</para>
            /// <para>Logical Name = checkemail</para>
            /// </summary>
            public const string checkemail = "checkemail";

            /// <summary>
            /// <para>Logical Name = checkemailname</para>
            /// </summary>
            public const string checkemailname = "checkemailname";

            /// <summary>
            /// <para>Contact</para>
            /// <para>Logical Name = contactid</para>
            /// </summary>
            public const string contactid = "contactid";

            /// <summary>
            /// <para>Logical Name = contactidname</para>
            /// </summary>
            public const string contactidname = "contactidname";

            /// <summary>
            /// <para>Logical Name = contactidyominame</para>
            /// </summary>
            public const string contactidyominame = "contactidyominame";

            /// <summary>
            /// <para>Contract Line</para>
            /// <para>Logical Name = contractdetailid</para>
            /// </summary>
            public const string contractdetailid = "contractdetailid";

            /// <summary>
            /// <para>Logical Name = contractdetailidname</para>
            /// </summary>
            public const string contractdetailidname = "contractdetailidname";

            /// <summary>
            /// <para>Contract</para>
            /// <para>Logical Name = contractid</para>
            /// </summary>
            public const string contractid = "contractid";

            /// <summary>
            /// <para>Logical Name = contractidname</para>
            /// </summary>
            public const string contractidname = "contractidname";

            /// <summary>
            /// <para>Service Level</para>
            /// <para>Logical Name = contractservicelevelcode</para>
            /// </summary>
            public const string contractservicelevelcode = "contractservicelevelcode";

            /// <summary>
            /// <para>Logical Name = contractservicelevelcodename</para>
            /// </summary>
            public const string contractservicelevelcodename = "contractservicelevelcodename";

            /// <summary>
            /// <para>Created By</para>
            /// <para>Logical Name = createdby</para>
            /// </summary>
            public const string createdby = "createdby";

            /// <summary>
            /// <para>Created By (External Party)</para>
            /// <para>Logical Name = createdbyexternalparty</para>
            /// </summary>
            public const string createdbyexternalparty = "createdbyexternalparty";

            /// <summary>
            /// <para>Logical Name = createdbyexternalpartyname</para>
            /// </summary>
            public const string createdbyexternalpartyname = "createdbyexternalpartyname";

            /// <summary>
            /// <para>Logical Name = createdbyexternalpartyyominame</para>
            /// </summary>
            public const string createdbyexternalpartyyominame = "createdbyexternalpartyyominame";

            /// <summary>
            /// <para>Logical Name = createdbyname</para>
            /// </summary>
            public const string createdbyname = "createdbyname";

            /// <summary>
            /// <para>Logical Name = createdbyyominame</para>
            /// </summary>
            public const string createdbyyominame = "createdbyyominame";

            /// <summary>
            /// <para>Created On</para>
            /// <para>Logical Name = createdon</para>
            /// </summary>
            public const string createdon = "createdon";

            /// <summary>
            /// <para>Created By (Delegate)</para>
            /// <para>Logical Name = createdonbehalfby</para>
            /// </summary>
            public const string createdonbehalfby = "createdonbehalfby";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyname</para>
            /// </summary>
            public const string createdonbehalfbyname = "createdonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyyominame</para>
            /// </summary>
            public const string createdonbehalfbyyominame = "createdonbehalfbyyominame";

            /// <summary>
            /// <para>Customer Contacted</para>
            /// <para>Logical Name = customercontacted</para>
            /// </summary>
            public const string customercontacted = "customercontacted";

            /// <summary>
            /// <para>Logical Name = customercontactedname</para>
            /// </summary>
            public const string customercontactedname = "customercontactedname";

            /// <summary>
            /// <para>Customer</para>
            /// <para>Logical Name = customerid</para>
            /// </summary>
            public const string customerid = "customerid";

            /// <summary>
            /// <para>Logical Name = customeridname</para>
            /// </summary>
            public const string customeridname = "customeridname";

            /// <summary>
            /// <para>Customer Type</para>
            /// <para>Logical Name = customeridtype</para>
            /// </summary>
            public const string customeridtype = "customeridtype";

            /// <summary>
            /// <para>Logical Name = customeridyominame</para>
            /// </summary>
            public const string customeridyominame = "customeridyominame";

            /// <summary>
            /// <para>Satisfaction</para>
            /// <para>Logical Name = customersatisfactioncode</para>
            /// </summary>
            public const string customersatisfactioncode = "customersatisfactioncode";

            /// <summary>
            /// <para>Logical Name = customersatisfactioncodename</para>
            /// </summary>
            public const string customersatisfactioncodename = "customersatisfactioncodename";

            /// <summary>
            /// <para>Decrement Entitlement Terms</para>
            /// <para>Logical Name = decremententitlementterm</para>
            /// </summary>
            public const string decremententitlementterm = "decremententitlementterm";

            /// <summary>
            /// <para>Logical Name = decremententitlementtermname</para>
            /// </summary>
            public const string decremententitlementtermname = "decremententitlementtermname";

            /// <summary>
            /// <para>Description</para>
            /// <para>Logical Name = description</para>
            /// </summary>
            public const string description = "description";

            /// <summary>
            /// <para>Email Address</para>
            /// <para>Logical Name = emailaddress</para>
            /// </summary>
            public const string emailaddress = "emailaddress";

            /// <summary>
            /// <para>Entitlement</para>
            /// <para>Logical Name = entitlementid</para>
            /// </summary>
            public const string entitlementid = "entitlementid";

            /// <summary>
            /// <para>Logical Name = entitlementidname</para>
            /// </summary>
            public const string entitlementidname = "entitlementidname";

            /// <summary>
            /// <para>Entity Image</para>
            /// <para>Logical Name = entityimage</para>
            /// </summary>
            public const string entityimage = "entityimage";

            /// <summary>
            /// <para>Logical Name = entityimage_timestamp</para>
            /// </summary>
            public const string entityimage_timestamp = "entityimage_timestamp";

            /// <summary>
            /// <para>Logical Name = entityimage_url</para>
            /// </summary>
            public const string entityimage_url = "entityimage_url";

            /// <summary>
            /// <para>Logical Name = entityimageid</para>
            /// </summary>
            public const string entityimageid = "entityimageid";

            /// <summary>
            /// <para>Escalated On</para>
            /// <para>Logical Name = escalatedon</para>
            /// </summary>
            public const string escalatedon = "escalatedon";

            /// <summary>
            /// <para>Exchange Rate</para>
            /// <para>Logical Name = exchangerate</para>
            /// </summary>
            public const string exchangerate = "exchangerate";

            /// <summary>
            /// <para>Existing Case</para>
            /// <para>Logical Name = existingcase</para>
            /// </summary>
            public const string existingcase = "existingcase";

            /// <summary>
            /// <para>First Response By KPI</para>
            /// <para>Logical Name = firstresponsebykpiid</para>
            /// </summary>
            public const string firstresponsebykpiid = "firstresponsebykpiid";

            /// <summary>
            /// <para>Logical Name = firstresponsebykpiidname</para>
            /// </summary>
            public const string firstresponsebykpiidname = "firstresponsebykpiidname";

            /// <summary>
            /// <para>First Response Sent</para>
            /// <para>Logical Name = firstresponsesent</para>
            /// </summary>
            public const string firstresponsesent = "firstresponsesent";

            /// <summary>
            /// <para>Logical Name = firstresponsesentname</para>
            /// </summary>
            public const string firstresponsesentname = "firstresponsesentname";

            /// <summary>
            /// <para>First Response SLA Status</para>
            /// <para>Logical Name = firstresponseslastatus</para>
            /// </summary>
            public const string firstresponseslastatus = "firstresponseslastatus";

            /// <summary>
            /// <para>Logical Name = firstresponseslastatusname</para>
            /// </summary>
            public const string firstresponseslastatusname = "firstresponseslastatusname";

            /// <summary>
            /// <para>Follow Up By</para>
            /// <para>Logical Name = followupby</para>
            /// </summary>
            public const string followupby = "followupby";

            /// <summary>
            /// <para>Follow up Task Created</para>
            /// <para>Logical Name = followuptaskcreated</para>
            /// </summary>
            public const string followuptaskcreated = "followuptaskcreated";

            /// <summary>
            /// <para>Logical Name = followuptaskcreatedname</para>
            /// </summary>
            public const string followuptaskcreatedname = "followuptaskcreatedname";

            /// <summary>
            /// <para>Import Sequence Number</para>
            /// <para>Logical Name = importsequencenumber</para>
            /// </summary>
            public const string importsequencenumber = "importsequencenumber";

            /// <summary>
            /// <para>Case</para>
            /// <para>Logical Name = incidentid</para>
            /// </summary>
            public const string incidentid = "incidentid";

            /// <summary>
            /// <para>Case Stage</para>
            /// <para>Logical Name = incidentstagecode</para>
            /// </summary>
            public const string incidentstagecode = "incidentstagecode";

            /// <summary>
            /// <para>Logical Name = incidentstagecodename</para>
            /// </summary>
            public const string incidentstagecodename = "incidentstagecodename";

            /// <summary>
            /// <para>Influence Score</para>
            /// <para>Logical Name = influencescore</para>
            /// </summary>
            public const string influencescore = "influencescore";

            /// <summary>
            /// <para>Decrementing</para>
            /// <para>Logical Name = isdecrementing</para>
            /// </summary>
            public const string isdecrementing = "isdecrementing";

            /// <summary>
            /// <para>Logical Name = isdecrementingname</para>
            /// </summary>
            public const string isdecrementingname = "isdecrementingname";

            /// <summary>
            /// <para>Is Escalated</para>
            /// <para>Logical Name = isescalated</para>
            /// </summary>
            public const string isescalated = "isescalated";

            /// <summary>
            /// <para>Logical Name = isescalatedname</para>
            /// </summary>
            public const string isescalatedname = "isescalatedname";

            /// <summary>
            /// <para>Knowledge Base Article</para>
            /// <para>Logical Name = kbarticleid</para>
            /// </summary>
            public const string kbarticleid = "kbarticleid";

            /// <summary>
            /// <para>Logical Name = kbarticleidname</para>
            /// </summary>
            public const string kbarticleidname = "kbarticleidname";

            /// <summary>
            /// <para>Last On Hold Time</para>
            /// <para>Logical Name = lastonholdtime</para>
            /// </summary>
            public const string lastonholdtime = "lastonholdtime";

            /// <summary>
            /// <para>Master Case</para>
            /// <para>Logical Name = masterid</para>
            /// </summary>
            public const string masterid = "masterid";

            /// <summary>
            /// <para>Logical Name = masteridname</para>
            /// </summary>
            public const string masteridname = "masteridname";

            /// <summary>
            /// <para>Internal Use Only</para>
            /// <para>Logical Name = merged</para>
            /// </summary>
            public const string merged = "merged";

            /// <summary>
            /// <para>Logical Name = mergedname</para>
            /// </summary>
            public const string mergedname = "mergedname";

            /// <summary>
            /// <para>Received As</para>
            /// <para>Logical Name = messagetypecode</para>
            /// </summary>
            public const string messagetypecode = "messagetypecode";

            /// <summary>
            /// <para>Logical Name = messagetypecodename</para>
            /// </summary>
            public const string messagetypecodename = "messagetypecodename";

            /// <summary>
            /// <para>Modified By</para>
            /// <para>Logical Name = modifiedby</para>
            /// </summary>
            public const string modifiedby = "modifiedby";

            /// <summary>
            /// <para>Modified By (External Party)</para>
            /// <para>Logical Name = modifiedbyexternalparty</para>
            /// </summary>
            public const string modifiedbyexternalparty = "modifiedbyexternalparty";

            /// <summary>
            /// <para>Logical Name = modifiedbyexternalpartyname</para>
            /// </summary>
            public const string modifiedbyexternalpartyname = "modifiedbyexternalpartyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyexternalpartyyominame</para>
            /// </summary>
            public const string modifiedbyexternalpartyyominame = "modifiedbyexternalpartyyominame";

            /// <summary>
            /// <para>Logical Name = modifiedbyname</para>
            /// </summary>
            public const string modifiedbyname = "modifiedbyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyyominame</para>
            /// </summary>
            public const string modifiedbyyominame = "modifiedbyyominame";

            /// <summary>
            /// <para>Modified On</para>
            /// <para>Logical Name = modifiedon</para>
            /// </summary>
            public const string modifiedon = "modifiedon";

            /// <summary>
            /// <para>Modified By (Delegate)</para>
            /// <para>Logical Name = modifiedonbehalfby</para>
            /// </summary>
            public const string modifiedonbehalfby = "modifiedonbehalfby";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyname</para>
            /// </summary>
            public const string modifiedonbehalfbyname = "modifiedonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyyominame</para>
            /// </summary>
            public const string modifiedonbehalfbyyominame = "modifiedonbehalfbyyominame";

            /// <summary>
            /// <para>Child Cases</para>
            /// <para>Logical Name = numberofchildincidents</para>
            /// </summary>
            public const string numberofchildincidents = "numberofchildincidents";

            /// <summary>
            /// <para>On Hold Time (Minutes)</para>
            /// <para>Logical Name = onholdtime</para>
            /// </summary>
            public const string onholdtime = "onholdtime";

            /// <summary>
            /// <para>Record Created On</para>
            /// <para>Logical Name = overriddencreatedon</para>
            /// </summary>
            public const string overriddencreatedon = "overriddencreatedon";

            /// <summary>
            /// <para>Owner</para>
            /// <para>Logical Name = ownerid</para>
            /// </summary>
            public const string ownerid = "ownerid";

            /// <summary>
            /// <para>Logical Name = owneridname</para>
            /// </summary>
            public const string owneridname = "owneridname";

            /// <summary>
            /// <para>Logical Name = owneridtype</para>
            /// </summary>
            public const string owneridtype = "owneridtype";

            /// <summary>
            /// <para>Logical Name = owneridyominame</para>
            /// </summary>
            public const string owneridyominame = "owneridyominame";

            /// <summary>
            /// <para>Owning Business Unit</para>
            /// <para>Logical Name = owningbusinessunit</para>
            /// </summary>
            public const string owningbusinessunit = "owningbusinessunit";

            /// <summary>
            /// <para>Owning Team</para>
            /// <para>Logical Name = owningteam</para>
            /// </summary>
            public const string owningteam = "owningteam";

            /// <summary>
            /// <para>Owning User</para>
            /// <para>Logical Name = owninguser</para>
            /// </summary>
            public const string owninguser = "owninguser";

            /// <summary>
            /// <para>Parent Case</para>
            /// <para>Logical Name = parentcaseid</para>
            /// </summary>
            public const string parentcaseid = "parentcaseid";

            /// <summary>
            /// <para>Logical Name = parentcaseidname</para>
            /// </summary>
            public const string parentcaseidname = "parentcaseidname";

            /// <summary>
            /// <para>Contact</para>
            /// <para>Logical Name = primarycontactid</para>
            /// </summary>
            public const string primarycontactid = "primarycontactid";

            /// <summary>
            /// <para>Logical Name = primarycontactidname</para>
            /// </summary>
            public const string primarycontactidname = "primarycontactidname";

            /// <summary>
            /// <para>Logical Name = primarycontactidyominame</para>
            /// </summary>
            public const string primarycontactidyominame = "primarycontactidyominame";

            /// <summary>
            /// <para>Priority</para>
            /// <para>Logical Name = prioritycode</para>
            /// </summary>
            public const string prioritycode = "prioritycode";

            /// <summary>
            /// <para>Logical Name = prioritycodename</para>
            /// </summary>
            public const string prioritycodename = "prioritycodename";

            /// <summary>
            /// <para>Process Id</para>
            /// <para>Logical Name = processid</para>
            /// </summary>
            public const string processid = "processid";

            /// <summary>
            /// <para>Product</para>
            /// <para>Logical Name = productid</para>
            /// </summary>
            public const string productid = "productid";

            /// <summary>
            /// <para>Logical Name = productidname</para>
            /// </summary>
            public const string productidname = "productidname";

            /// <summary>
            /// <para>Serial Number</para>
            /// <para>Logical Name = productserialnumber</para>
            /// </summary>
            public const string productserialnumber = "productserialnumber";

            /// <summary>
            /// <para>Resolve By</para>
            /// <para>Logical Name = resolveby</para>
            /// </summary>
            public const string resolveby = "resolveby";

            /// <summary>
            /// <para>Resolve By KPI</para>
            /// <para>Logical Name = resolvebykpiid</para>
            /// </summary>
            public const string resolvebykpiid = "resolvebykpiid";

            /// <summary>
            /// <para>Logical Name = resolvebykpiidname</para>
            /// </summary>
            public const string resolvebykpiidname = "resolvebykpiidname";

            /// <summary>
            /// <para>Resolve By SLA Status</para>
            /// <para>Logical Name = resolvebyslastatus</para>
            /// </summary>
            public const string resolvebyslastatus = "resolvebyslastatus";

            /// <summary>
            /// <para>Logical Name = resolvebyslastatusname</para>
            /// </summary>
            public const string resolvebyslastatusname = "resolvebyslastatusname";

            /// <summary>
            /// <para>First Response By</para>
            /// <para>Logical Name = responseby</para>
            /// </summary>
            public const string responseby = "responseby";

            /// <summary>
            /// <para>Responsible Contact</para>
            /// <para>Logical Name = responsiblecontactid</para>
            /// </summary>
            public const string responsiblecontactid = "responsiblecontactid";

            /// <summary>
            /// <para>Logical Name = responsiblecontactidname</para>
            /// </summary>
            public const string responsiblecontactidname = "responsiblecontactidname";

            /// <summary>
            /// <para>Logical Name = responsiblecontactidyominame</para>
            /// </summary>
            public const string responsiblecontactidyominame = "responsiblecontactidyominame";

            /// <summary>
            /// <para>Route Case</para>
            /// <para>Logical Name = routecase</para>
            /// </summary>
            public const string routecase = "routecase";

            /// <summary>
            /// <para>Logical Name = routecasename</para>
            /// </summary>
            public const string routecasename = "routecasename";

            /// <summary>
            /// <para>Sentiment Value</para>
            /// <para>Logical Name = sentimentvalue</para>
            /// </summary>
            public const string sentimentvalue = "sentimentvalue";

            /// <summary>
            /// <para>Service Stage</para>
            /// <para>Logical Name = servicestage</para>
            /// </summary>
            public const string servicestage = "servicestage";

            /// <summary>
            /// <para>Logical Name = servicestagename</para>
            /// </summary>
            public const string servicestagename = "servicestagename";

            /// <summary>
            /// <para>Severity</para>
            /// <para>Logical Name = severitycode</para>
            /// </summary>
            public const string severitycode = "severitycode";

            /// <summary>
            /// <para>Logical Name = severitycodename</para>
            /// </summary>
            public const string severitycodename = "severitycodename";

            /// <summary>
            /// <para>SLA</para>
            /// <para>Logical Name = slaid</para>
            /// </summary>
            public const string slaid = "slaid";

            /// <summary>
            /// <para>Last SLA applied</para>
            /// <para>Logical Name = slainvokedid</para>
            /// </summary>
            public const string slainvokedid = "slainvokedid";

            /// <summary>
            /// <para>Logical Name = slainvokedidname</para>
            /// </summary>
            public const string slainvokedidname = "slainvokedidname";

            /// <summary>
            /// <para>Logical Name = slaname</para>
            /// </summary>
            public const string slaname = "slaname";

            /// <summary>
            /// <para>Social Profile</para>
            /// <para>Logical Name = socialprofileid</para>
            /// </summary>
            public const string socialprofileid = "socialprofileid";

            /// <summary>
            /// <para>Logical Name = socialprofileidname</para>
            /// </summary>
            public const string socialprofileidname = "socialprofileidname";

            /// <summary>
            /// <para>(Deprecated) Stage Id</para>
            /// <para>Logical Name = stageid</para>
            /// </summary>
            public const string stageid = "stageid";

            /// <summary>
            /// <para>Status</para>
            /// <para>Logical Name = statecode</para>
            /// </summary>
            public const string statecode = "statecode";

            /// <summary>
            /// <para>Logical Name = statecodename</para>
            /// </summary>
            public const string statecodename = "statecodename";

            /// <summary>
            /// <para>Status Reason</para>
            /// <para>Logical Name = statuscode</para>
            /// </summary>
            public const string statuscode = "statuscode";

            /// <summary>
            /// <para>Logical Name = statuscodename</para>
            /// </summary>
            public const string statuscodename = "statuscodename";

            /// <summary>
            /// <para>Subject</para>
            /// <para>Logical Name = subjectid</para>
            /// </summary>
            public const string subjectid = "subjectid";

            /// <summary>
            /// <para>Logical Name = subjectidname</para>
            /// </summary>
            public const string subjectidname = "subjectidname";

            /// <summary>
            /// <para>Case Number</para>
            /// <para>Logical Name = ticketnumber</para>
            /// </summary>
            public const string ticketnumber = "ticketnumber";

            /// <summary>
            /// <para>Time Zone Rule Version Number</para>
            /// <para>Logical Name = timezoneruleversionnumber</para>
            /// </summary>
            public const string timezoneruleversionnumber = "timezoneruleversionnumber";

            /// <summary>
            /// <para>Case Title</para>
            /// <para>Logical Name = title</para>
            /// </summary>
            public const string title = "title";

            /// <summary>
            /// <para>Currency</para>
            /// <para>Logical Name = transactioncurrencyid</para>
            /// </summary>
            public const string transactioncurrencyid = "transactioncurrencyid";

            /// <summary>
            /// <para>Logical Name = transactioncurrencyidname</para>
            /// </summary>
            public const string transactioncurrencyidname = "transactioncurrencyidname";

            /// <summary>
            /// <para>(Deprecated) Traversed Path</para>
            /// <para>Logical Name = traversedpath</para>
            /// </summary>
            public const string traversedpath = "traversedpath";

            /// <summary>
            /// <para>UTC Conversion Time Zone Code</para>
            /// <para>Logical Name = utcconversiontimezonecode</para>
            /// </summary>
            public const string utcconversiontimezonecode = "utcconversiontimezonecode";

            /// <summary>
            /// <para>Version Number</para>
            /// <para>Logical Name = versionnumber</para>
            /// </summary>
            public const string versionnumber = "versionnumber";

        }

    }
}
