// <auto-generated />

using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.Threading.Tasks;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace crmUGWorkflow.ProxyClasses
{
    [EntityLogicalNameAttribute("account")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "4.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class account : BaseProxyClass
    {
        public new const string LogicalName = "account";
        public const int ObjectTypeCode = 1;
        public const string PrimaryIdAttribute = "accountid";
        public const string PrimaryNameAttribute = "name";
        public const string PrimaryImageAttribute = "entityimage";
        static account()
        {
            BaseProxyClass.RegisterProxyType(typeof(account), "account");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public account() : base(new Entity("account")) { }
        public account(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<account>(); }

        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }

        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }

        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }

        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }

        private static Dictionary<string, eNumberOptions> _numberOptions;

        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }
        /// <summary>
        /// Logical Name: accountcategorycode
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        public eAccount_accountcategorycode? accountcategorycode
        {
            get
            {
                if (accountcategorycode_OptionSetValue != null) { return (eAccount_accountcategorycode)accountcategorycode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.accountcategorycode_OptionSetValue = new OptionSetValue((int)value); }
                else this.accountcategorycode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: accountcategorycode</para>
        /// </summary>
        [AttributeLogicalName("accountcategorycode")]
        public OptionSetValue accountcategorycode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("accountcategorycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("accountcategorycode", value, "accountcategorycode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string accountcategorycode_Text(IOrganizationService service)
        {
            return this.accountcategorycode_OptionSetValue.GetOptionSetText(service, this, "accountcategorycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string accountcategorycode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.accountcategorycode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: accountclassificationcode
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        public eAccount_accountclassificationcode? accountclassificationcode
        {
            get
            {
                if (accountclassificationcode_OptionSetValue != null) { return (eAccount_accountclassificationcode)accountclassificationcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.accountclassificationcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.accountclassificationcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: accountclassificationcode</para>
        /// </summary>
        [AttributeLogicalName("accountclassificationcode")]
        public OptionSetValue accountclassificationcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("accountclassificationcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("accountclassificationcode", value, "accountclassificationcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string accountclassificationcode_Text(IOrganizationService service)
        {
            return this.accountclassificationcode_OptionSetValue.GetOptionSetText(service, this, "accountclassificationcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string accountclassificationcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.accountclassificationcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Key Property (Uniqueidentifier)</para>
        /// <para>Logical Name: accountid</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public Guid accountid
        {
            get
            {
                return base.Id;
            }
            set
            {
                base.Id = value;
                base.SetPropertyValue("accountid", value, "accountid");
            }
        }

        /// <summary>
        /// <para>Logical Name: accountnumber</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("accountnumber")]
        public string accountnumber
        {
            get
            {
                return this.GetPropertyValue<string>("accountnumber");
            }
            set
            {
                this.SetPropertyValue("accountnumber", value, 20, "accountnumber");
            }
        }

        /// <summary>
        /// Logical Name: accountratingcode
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        public eAccount_accountratingcode? accountratingcode
        {
            get
            {
                if (accountratingcode_OptionSetValue != null) { return (eAccount_accountratingcode)accountratingcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.accountratingcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.accountratingcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: accountratingcode</para>
        /// </summary>
        [AttributeLogicalName("accountratingcode")]
        public OptionSetValue accountratingcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("accountratingcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("accountratingcode", value, "accountratingcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string accountratingcode_Text(IOrganizationService service)
        {
            return this.accountratingcode_OptionSetValue.GetOptionSetText(service, this, "accountratingcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string accountratingcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.accountratingcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address1_addressid</para>
        /// </summary>
        [AttributeLogicalName("address1_addressid")]
        public Guid address1_addressid
        {
            get
            {
                return this.GetPropertyValue<Guid>("address1_addressid");
            }
            set
            {
                this.SetPropertyValue<Guid>("address1_addressid", value, "address1_addressid");
            }
        }

        /// <summary>
        /// Logical Name: address1_addresstypecode
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public eAccount_address1_addresstypecode? address1_addresstypecode
        {
            get
            {
                if (address1_addresstypecode_OptionSetValue != null) { return (eAccount_address1_addresstypecode)address1_addresstypecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.address1_addresstypecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.address1_addresstypecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address1_addresstypecode</para>
        /// </summary>
        [AttributeLogicalName("address1_addresstypecode")]
        public OptionSetValue address1_addresstypecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address1_addresstypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address1_addresstypecode", value, "address1_addresstypecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string address1_addresstypecode_Text(IOrganizationService service)
        {
            return this.address1_addresstypecode_OptionSetValue.GetOptionSetText(service, this, "address1_addresstypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string address1_addresstypecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.address1_addresstypecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address1_city</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_city")]
        public string address1_city
        {
            get
            {
                return this.GetPropertyValue<string>("address1_city");
            }
            set
            {
                this.SetPropertyValue("address1_city", value, 80, "address1_city");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_composite</para>
        /// <para>Max Length: 1000 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_composite")]
        public string address1_composite
        {
            get
            {
                return this.GetPropertyValue<string>("address1_composite");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_country</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_country")]
        public string address1_country
        {
            get
            {
                return this.GetPropertyValue<string>("address1_country");
            }
            set
            {
                this.SetPropertyValue("address1_country", value, 80, "address1_country");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_county</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_county")]
        public string address1_county
        {
            get
            {
                return this.GetPropertyValue<string>("address1_county");
            }
            set
            {
                this.SetPropertyValue("address1_county", value, 50, "address1_county");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_fax</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_fax")]
        public string address1_fax
        {
            get
            {
                return this.GetPropertyValue<string>("address1_fax");
            }
            set
            {
                this.SetPropertyValue("address1_fax", value, 50, "address1_fax");
            }
        }

        /// <summary>
        /// Logical Name: address1_freighttermscode
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public eAccount_address1_freighttermscode? address1_freighttermscode
        {
            get
            {
                if (address1_freighttermscode_OptionSetValue != null) { return (eAccount_address1_freighttermscode)address1_freighttermscode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.address1_freighttermscode_OptionSetValue = new OptionSetValue((int)value); }
                else this.address1_freighttermscode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address1_freighttermscode</para>
        /// </summary>
        [AttributeLogicalName("address1_freighttermscode")]
        public OptionSetValue address1_freighttermscode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address1_freighttermscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address1_freighttermscode", value, "address1_freighttermscode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string address1_freighttermscode_Text(IOrganizationService service)
        {
            return this.address1_freighttermscode_OptionSetValue.GetOptionSetText(service, this, "address1_freighttermscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string address1_freighttermscode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.address1_freighttermscode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address1_latitude</para>
        /// <para>Minimum Value: -90</para>
        /// <para>Maximum Value: 90</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address1_latitude")]
        public double? address1_latitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address1_latitude");
            }
            set
            {
                this.SetPropertyValue("address1_latitude", (double?)value, (double)-90, (double)90, "address1_latitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_line1</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_line1")]
        public string address1_line1
        {
            get
            {
                return this.GetPropertyValue<string>("address1_line1");
            }
            set
            {
                this.SetPropertyValue("address1_line1", value, 250, "address1_line1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_line2</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_line2")]
        public string address1_line2
        {
            get
            {
                return this.GetPropertyValue<string>("address1_line2");
            }
            set
            {
                this.SetPropertyValue("address1_line2", value, 250, "address1_line2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_line3</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_line3")]
        public string address1_line3
        {
            get
            {
                return this.GetPropertyValue<string>("address1_line3");
            }
            set
            {
                this.SetPropertyValue("address1_line3", value, 250, "address1_line3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_longitude</para>
        /// <para>Minimum Value: -180</para>
        /// <para>Maximum Value: 180</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address1_longitude")]
        public double? address1_longitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address1_longitude");
            }
            set
            {
                this.SetPropertyValue("address1_longitude", (double?)value, (double)-180, (double)180, "address1_longitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_name</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_name")]
        public string address1_name
        {
            get
            {
                return this.GetPropertyValue<string>("address1_name");
            }
            set
            {
                this.SetPropertyValue("address1_name", value, 200, "address1_name");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_postalcode</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_postalcode")]
        public string address1_postalcode
        {
            get
            {
                return this.GetPropertyValue<string>("address1_postalcode");
            }
            set
            {
                this.SetPropertyValue("address1_postalcode", value, 20, "address1_postalcode");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_postofficebox</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_postofficebox")]
        public string address1_postofficebox
        {
            get
            {
                return this.GetPropertyValue<string>("address1_postofficebox");
            }
            set
            {
                this.SetPropertyValue("address1_postofficebox", value, 20, "address1_postofficebox");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_primarycontactname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_primarycontactname")]
        public string address1_primarycontactname
        {
            get
            {
                return this.GetPropertyValue<string>("address1_primarycontactname");
            }
            set
            {
                this.SetPropertyValue("address1_primarycontactname", value, 100, "address1_primarycontactname");
            }
        }

        /// <summary>
        /// Logical Name: address1_shippingmethodcode
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public eAccount_address1_shippingmethodcode? address1_shippingmethodcode
        {
            get
            {
                if (address1_shippingmethodcode_OptionSetValue != null) { return (eAccount_address1_shippingmethodcode)address1_shippingmethodcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.address1_shippingmethodcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.address1_shippingmethodcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address1_shippingmethodcode</para>
        /// </summary>
        [AttributeLogicalName("address1_shippingmethodcode")]
        public OptionSetValue address1_shippingmethodcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address1_shippingmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address1_shippingmethodcode", value, "address1_shippingmethodcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string address1_shippingmethodcode_Text(IOrganizationService service)
        {
            return this.address1_shippingmethodcode_OptionSetValue.GetOptionSetText(service, this, "address1_shippingmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string address1_shippingmethodcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.address1_shippingmethodcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address1_stateorprovince</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_stateorprovince")]
        public string address1_stateorprovince
        {
            get
            {
                return this.GetPropertyValue<string>("address1_stateorprovince");
            }
            set
            {
                this.SetPropertyValue("address1_stateorprovince", value, 50, "address1_stateorprovince");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_telephone1</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone1")]
        public string address1_telephone1
        {
            get
            {
                return this.GetPropertyValue<string>("address1_telephone1");
            }
            set
            {
                this.SetPropertyValue("address1_telephone1", value, 50, "address1_telephone1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_telephone2</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone2")]
        public string address1_telephone2
        {
            get
            {
                return this.GetPropertyValue<string>("address1_telephone2");
            }
            set
            {
                this.SetPropertyValue("address1_telephone2", value, 50, "address1_telephone2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_telephone3</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_telephone3")]
        public string address1_telephone3
        {
            get
            {
                return this.GetPropertyValue<string>("address1_telephone3");
            }
            set
            {
                this.SetPropertyValue("address1_telephone3", value, 50, "address1_telephone3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_upszone</para>
        /// <para>Max Length: 4 characters</para>
        /// </summary>
        [AttributeLogicalName("address1_upszone")]
        public string address1_upszone
        {
            get
            {
                return this.GetPropertyValue<string>("address1_upszone");
            }
            set
            {
                this.SetPropertyValue("address1_upszone", value, 4, "address1_upszone");
            }
        }

        /// <summary>
        /// <para>Logical Name: address1_utcoffset</para>
        /// <para>Minimum Value: -1500</para>
        /// <para>Maximum Value: 1500</para>
        /// </summary>
        [AttributeLogicalName("address1_utcoffset")]
        public int? address1_utcoffset
        {
            get
            {
                return this.GetPropertyValue<int?>("address1_utcoffset");
            }
            set
            {
                this.SetPropertyValue("address1_utcoffset", (int?)value, (int)-1500, (int)1500, "address1_utcoffset");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_addressid</para>
        /// </summary>
        [AttributeLogicalName("address2_addressid")]
        public Guid address2_addressid
        {
            get
            {
                return this.GetPropertyValue<Guid>("address2_addressid");
            }
            set
            {
                this.SetPropertyValue<Guid>("address2_addressid", value, "address2_addressid");
            }
        }

        /// <summary>
        /// Logical Name: address2_addresstypecode
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public eAccount_address2_addresstypecode? address2_addresstypecode
        {
            get
            {
                if (address2_addresstypecode_OptionSetValue != null) { return (eAccount_address2_addresstypecode)address2_addresstypecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.address2_addresstypecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.address2_addresstypecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address2_addresstypecode</para>
        /// </summary>
        [AttributeLogicalName("address2_addresstypecode")]
        public OptionSetValue address2_addresstypecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address2_addresstypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address2_addresstypecode", value, "address2_addresstypecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string address2_addresstypecode_Text(IOrganizationService service)
        {
            return this.address2_addresstypecode_OptionSetValue.GetOptionSetText(service, this, "address2_addresstypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string address2_addresstypecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.address2_addresstypecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address2_city</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_city")]
        public string address2_city
        {
            get
            {
                return this.GetPropertyValue<string>("address2_city");
            }
            set
            {
                this.SetPropertyValue("address2_city", value, 80, "address2_city");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_composite</para>
        /// <para>Max Length: 1000 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_composite")]
        public string address2_composite
        {
            get
            {
                return this.GetPropertyValue<string>("address2_composite");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_country</para>
        /// <para>Max Length: 80 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_country")]
        public string address2_country
        {
            get
            {
                return this.GetPropertyValue<string>("address2_country");
            }
            set
            {
                this.SetPropertyValue("address2_country", value, 80, "address2_country");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_county</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_county")]
        public string address2_county
        {
            get
            {
                return this.GetPropertyValue<string>("address2_county");
            }
            set
            {
                this.SetPropertyValue("address2_county", value, 50, "address2_county");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_fax</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_fax")]
        public string address2_fax
        {
            get
            {
                return this.GetPropertyValue<string>("address2_fax");
            }
            set
            {
                this.SetPropertyValue("address2_fax", value, 50, "address2_fax");
            }
        }

        /// <summary>
        /// Logical Name: address2_freighttermscode
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public eAccount_address2_freighttermscode? address2_freighttermscode
        {
            get
            {
                if (address2_freighttermscode_OptionSetValue != null) { return (eAccount_address2_freighttermscode)address2_freighttermscode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.address2_freighttermscode_OptionSetValue = new OptionSetValue((int)value); }
                else this.address2_freighttermscode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address2_freighttermscode</para>
        /// </summary>
        [AttributeLogicalName("address2_freighttermscode")]
        public OptionSetValue address2_freighttermscode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address2_freighttermscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address2_freighttermscode", value, "address2_freighttermscode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string address2_freighttermscode_Text(IOrganizationService service)
        {
            return this.address2_freighttermscode_OptionSetValue.GetOptionSetText(service, this, "address2_freighttermscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string address2_freighttermscode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.address2_freighttermscode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address2_latitude</para>
        /// <para>Minimum Value: -90</para>
        /// <para>Maximum Value: 90</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address2_latitude")]
        public double? address2_latitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address2_latitude");
            }
            set
            {
                this.SetPropertyValue("address2_latitude", (double?)value, (double)-90, (double)90, "address2_latitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_line1</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_line1")]
        public string address2_line1
        {
            get
            {
                return this.GetPropertyValue<string>("address2_line1");
            }
            set
            {
                this.SetPropertyValue("address2_line1", value, 250, "address2_line1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_line2</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_line2")]
        public string address2_line2
        {
            get
            {
                return this.GetPropertyValue<string>("address2_line2");
            }
            set
            {
                this.SetPropertyValue("address2_line2", value, 250, "address2_line2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_line3</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_line3")]
        public string address2_line3
        {
            get
            {
                return this.GetPropertyValue<string>("address2_line3");
            }
            set
            {
                this.SetPropertyValue("address2_line3", value, 250, "address2_line3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_longitude</para>
        /// <para>Minimum Value: -180</para>
        /// <para>Maximum Value: 180</para>
        /// <para>Precision: 5</para>
        /// </summary>
        [AttributeLogicalName("address2_longitude")]
        public double? address2_longitude
        {
            get
            {
                return this.GetPropertyValue<double?>("address2_longitude");
            }
            set
            {
                this.SetPropertyValue("address2_longitude", (double?)value, (double)-180, (double)180, "address2_longitude");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_name</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_name")]
        public string address2_name
        {
            get
            {
                return this.GetPropertyValue<string>("address2_name");
            }
            set
            {
                this.SetPropertyValue("address2_name", value, 200, "address2_name");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_postalcode</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_postalcode")]
        public string address2_postalcode
        {
            get
            {
                return this.GetPropertyValue<string>("address2_postalcode");
            }
            set
            {
                this.SetPropertyValue("address2_postalcode", value, 20, "address2_postalcode");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_postofficebox</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_postofficebox")]
        public string address2_postofficebox
        {
            get
            {
                return this.GetPropertyValue<string>("address2_postofficebox");
            }
            set
            {
                this.SetPropertyValue("address2_postofficebox", value, 20, "address2_postofficebox");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_primarycontactname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_primarycontactname")]
        public string address2_primarycontactname
        {
            get
            {
                return this.GetPropertyValue<string>("address2_primarycontactname");
            }
            set
            {
                this.SetPropertyValue("address2_primarycontactname", value, 100, "address2_primarycontactname");
            }
        }

        /// <summary>
        /// Logical Name: address2_shippingmethodcode
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public eAccount_address2_shippingmethodcode? address2_shippingmethodcode
        {
            get
            {
                if (address2_shippingmethodcode_OptionSetValue != null) { return (eAccount_address2_shippingmethodcode)address2_shippingmethodcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.address2_shippingmethodcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.address2_shippingmethodcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: address2_shippingmethodcode</para>
        /// </summary>
        [AttributeLogicalName("address2_shippingmethodcode")]
        public OptionSetValue address2_shippingmethodcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("address2_shippingmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("address2_shippingmethodcode", value, "address2_shippingmethodcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string address2_shippingmethodcode_Text(IOrganizationService service)
        {
            return this.address2_shippingmethodcode_OptionSetValue.GetOptionSetText(service, this, "address2_shippingmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string address2_shippingmethodcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.address2_shippingmethodcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: address2_stateorprovince</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_stateorprovince")]
        public string address2_stateorprovince
        {
            get
            {
                return this.GetPropertyValue<string>("address2_stateorprovince");
            }
            set
            {
                this.SetPropertyValue("address2_stateorprovince", value, 50, "address2_stateorprovince");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_telephone1</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone1")]
        public string address2_telephone1
        {
            get
            {
                return this.GetPropertyValue<string>("address2_telephone1");
            }
            set
            {
                this.SetPropertyValue("address2_telephone1", value, 50, "address2_telephone1");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_telephone2</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone2")]
        public string address2_telephone2
        {
            get
            {
                return this.GetPropertyValue<string>("address2_telephone2");
            }
            set
            {
                this.SetPropertyValue("address2_telephone2", value, 50, "address2_telephone2");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_telephone3</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_telephone3")]
        public string address2_telephone3
        {
            get
            {
                return this.GetPropertyValue<string>("address2_telephone3");
            }
            set
            {
                this.SetPropertyValue("address2_telephone3", value, 50, "address2_telephone3");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_upszone</para>
        /// <para>Max Length: 4 characters</para>
        /// </summary>
        [AttributeLogicalName("address2_upszone")]
        public string address2_upszone
        {
            get
            {
                return this.GetPropertyValue<string>("address2_upszone");
            }
            set
            {
                this.SetPropertyValue("address2_upszone", value, 4, "address2_upszone");
            }
        }

        /// <summary>
        /// <para>Logical Name: address2_utcoffset</para>
        /// <para>Minimum Value: -1500</para>
        /// <para>Maximum Value: 1500</para>
        /// </summary>
        [AttributeLogicalName("address2_utcoffset")]
        public int? address2_utcoffset
        {
            get
            {
                return this.GetPropertyValue<int?>("address2_utcoffset");
            }
            set
            {
                this.SetPropertyValue("address2_utcoffset", (int?)value, (int)-1500, (int)1500, "address2_utcoffset");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging30</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public decimal? aging30
        {
            get
            {
                if (aging30Money != null) { return aging30Money.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging30</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging30")]
        public Money aging30Money
        {
            get
            {
                return this.GetPropertyValue<Money>("aging30");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging30_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public decimal? aging30_base
        {
            get
            {
                if (aging30_baseMoney != null) { return aging30_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging30_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging30_base")]
        public Money aging30_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("aging30_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging60</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public decimal? aging60
        {
            get
            {
                if (aging60Money != null) { return aging60Money.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging60</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging60")]
        public Money aging60Money
        {
            get
            {
                return this.GetPropertyValue<Money>("aging60");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging60_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public decimal? aging60_base
        {
            get
            {
                if (aging60_baseMoney != null) { return aging60_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging60_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging60_base")]
        public Money aging60_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("aging60_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging90</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public decimal? aging90
        {
            get
            {
                if (aging90Money != null) { return aging90Money.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging90</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("aging90")]
        public Money aging90Money
        {
            get
            {
                return this.GetPropertyValue<Money>("aging90");
            }
        }

        /// <summary>
        /// <para>Logical Name: aging90_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public decimal? aging90_base
        {
            get
            {
                if (aging90_baseMoney != null) { return aging90_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: aging90_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("aging90_base")]
        public Money aging90_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("aging90_base");
            }
        }

        /// <summary>
        /// Logical Name: businesstypecode
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        public eAccount_businesstypecode? businesstypecode
        {
            get
            {
                if (businesstypecode_OptionSetValue != null) { return (eAccount_businesstypecode)businesstypecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.businesstypecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.businesstypecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: businesstypecode</para>
        /// </summary>
        [AttributeLogicalName("businesstypecode")]
        public OptionSetValue businesstypecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("businesstypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("businesstypecode", value, "businesstypecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string businesstypecode_Text(IOrganizationService service)
        {
            return this.businesstypecode_OptionSetValue.GetOptionSetText(service, this, "businesstypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string businesstypecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.businesstypecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: createdby</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference createdby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference createdbyexternalparty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string createdbyexternalpartyname
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyyominame")]
        public string createdbyexternalpartyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string createdbyname
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyyominame")]
        public string createdbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdon</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? createdon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("createdon");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference createdonbehalfby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyname")]
        public string createdonbehalfbyname
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyyominame")]
        public string createdonbehalfbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: creditlimit</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public decimal? creditlimit
        {
            get
            {
                if (creditlimitMoney != null) { return creditlimitMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.creditlimitMoney = new Money(value.Value); }
                else this.creditlimitMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: creditlimit</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("creditlimit")]
        public Money creditlimitMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("creditlimit");
            }
            set
            {
                this.SetPropertyValue("creditlimit", (Money)value, (decimal)0, (decimal)100000000000000, "creditlimitMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: creditlimit_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public decimal? creditlimit_base
        {
            get
            {
                if (creditlimit_baseMoney != null) { return creditlimit_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: creditlimit_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("creditlimit_base")]
        public Money creditlimit_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("creditlimit_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: creditonhold</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("creditonhold")]
        public bool? creditonhold
        {
            get
            {
                return this.GetPropertyValue<bool?>("creditonhold");
            }
            set
            {
                this.SetPropertyValue<bool?>("creditonhold", value, "creditonhold");
            }
        }


        /// <summary>
        /// Logical Name: customersizecode
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public eAccount_customersizecode? customersizecode
        {
            get
            {
                if (customersizecode_OptionSetValue != null) { return (eAccount_customersizecode)customersizecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.customersizecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.customersizecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: customersizecode</para>
        /// </summary>
        [AttributeLogicalName("customersizecode")]
        public OptionSetValue customersizecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("customersizecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("customersizecode", value, "customersizecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string customersizecode_Text(IOrganizationService service)
        {
            return this.customersizecode_OptionSetValue.GetOptionSetText(service, this, "customersizecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string customersizecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.customersizecode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: customertypecode
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public eAccount_customertypecode? customertypecode
        {
            get
            {
                if (customertypecode_OptionSetValue != null) { return (eAccount_customertypecode)customertypecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.customertypecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.customertypecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: customertypecode</para>
        /// </summary>
        [AttributeLogicalName("customertypecode")]
        public OptionSetValue customertypecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("customertypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("customertypecode", value, "customertypecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string customertypecode_Text(IOrganizationService service)
        {
            return this.customertypecode_OptionSetValue.GetOptionSetText(service, this, "customertypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string customertypecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.customertypecode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: defaultpricelevelid</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelid")]
        public EntityReference defaultpricelevelid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("defaultpricelevelid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("defaultpricelevelid", value, "defaultpricelevelid");
            }
        }

        /// <summary>
        /// <para>Logical Name: defaultpricelevelidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("defaultpricelevelidname")]
        public string defaultpricelevelidname
        {
            get
            {
                return this.GetPropertyValue<string>("defaultpricelevelidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: description</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string description
        {
            get
            {
                return this.GetPropertyValue<string>("description");
            }
            set
            {
                this.SetPropertyValue("description", value, 2000, "description");
            }
        }

        /// <summary>
        /// <para>Logical Name: donotbulkemail</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotbulkemail")]
        public bool? donotbulkemail
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotbulkemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotbulkemail", value, "donotbulkemail");
            }
        }


        /// <summary>
        /// <para>Logical Name: donotbulkpostalmail</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("donotbulkpostalmail")]
        public bool? donotbulkpostalmail
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotbulkpostalmail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotbulkpostalmail", value, "donotbulkpostalmail");
            }
        }


        /// <summary>
        /// <para>Logical Name: donotemail</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotemail")]
        public bool? donotemail
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotemail", value, "donotemail");
            }
        }


        /// <summary>
        /// <para>Logical Name: donotfax</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotfax")]
        public bool? donotfax
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotfax");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotfax", value, "donotfax");
            }
        }


        /// <summary>
        /// <para>Logical Name: donotphone</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotphone")]
        public bool? donotphone
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotphone");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotphone", value, "donotphone");
            }
        }


        /// <summary>
        /// <para>Logical Name: donotpostalmail</para>
        /// <para>True = Do Not Allow</para>
        /// <para>False = Allow</para>
        /// </summary>
        [AttributeLogicalName("donotpostalmail")]
        public bool? donotpostalmail
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotpostalmail");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotpostalmail", value, "donotpostalmail");
            }
        }



        /// <summary>
        /// <para>Logical Name: donotsendmm</para>
        /// <para>True = Do Not Send</para>
        /// <para>False = Send</para>
        /// </summary>
        [AttributeLogicalName("donotsendmm")]
        public bool? donotsendmm
        {
            get
            {
                return this.GetPropertyValue<bool?>("donotsendmm");
            }
            set
            {
                this.SetPropertyValue<bool?>("donotsendmm", value, "donotsendmm");
            }
        }

        /// <summary>
        /// <para>Logical Name: emailaddress1</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress1")]
        public string emailaddress1
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress1");
            }
            set
            {
                this.SetPropertyValue("emailaddress1", value, 100, "emailaddress1");
            }
        }

        /// <summary>
        /// <para>Logical Name: emailaddress2</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress2")]
        public string emailaddress2
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress2");
            }
            set
            {
                this.SetPropertyValue("emailaddress2", value, 100, "emailaddress2");
            }
        }

        /// <summary>
        /// <para>Logical Name: emailaddress3</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("emailaddress3")]
        public string emailaddress3
        {
            get
            {
                return this.GetPropertyValue<string>("emailaddress3");
            }
            set
            {
                this.SetPropertyValue("emailaddress3", value, 100, "emailaddress3");
            }
        }


        /// <summary>
        /// <para>Logical Name: entityimage_timestamp</para>
        /// </summary>
        [AttributeLogicalName("entityimage_timestamp")]
        public int? entityimage_timestamp
        {
            get
            {
                return this.GetPropertyValue<int?>("entityimage_timestamp");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimage_url</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("entityimage_url")]
        public string entityimage_url
        {
            get
            {
                return this.GetPropertyValue<string>("entityimage_url");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimageid</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid entityimageid
        {
            get
            {
                return this.GetPropertyValue<Guid>("entityimageid");
            }
        }

        /// <summary>
        /// <para>Logical Name: exchangerate</para>
        /// <para>Minimum Value: 0.0000000001</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 10</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? exchangerate
        {
            get
            {
                return this.GetPropertyValue<decimal?>("exchangerate");
            }
        }

        /// <summary>
        /// <para>Logical Name: fax</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("fax")]
        public string fax
        {
            get
            {
                return this.GetPropertyValue<string>("fax");
            }
            set
            {
                this.SetPropertyValue("fax", value, 50, "fax");
            }
        }

        /// <summary>
        /// <para>Logical Name: followemail</para>
        /// <para>True = Allow</para>
        /// <para>False = Do Not Allow</para>
        /// </summary>
        [AttributeLogicalName("followemail")]
        public bool? followemail
        {
            get
            {
                return this.GetPropertyValue<bool?>("followemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("followemail", value, "followemail");
            }
        }


        /// <summary>
        /// <para>Logical Name: ftpsiteurl</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("ftpsiteurl")]
        public string ftpsiteurl
        {
            get
            {
                return this.GetPropertyValue<string>("ftpsiteurl");
            }
            set
            {
                this.SetPropertyValue("ftpsiteurl", value, 200, "ftpsiteurl");
            }
        }

        /// <summary>
        /// <para>Logical Name: importsequencenumber</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? importsequencenumber
        {
            get
            {
                return this.GetPropertyValue<int?>("importsequencenumber");
            }
            set
            {
                this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, "importsequencenumber");
            }
        }

        /// <summary>
        /// Logical Name: industrycode
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public eAccount_industrycode? industrycode
        {
            get
            {
                if (industrycode_OptionSetValue != null) { return (eAccount_industrycode)industrycode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.industrycode_OptionSetValue = new OptionSetValue((int)value); }
                else this.industrycode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: industrycode</para>
        /// </summary>
        [AttributeLogicalName("industrycode")]
        public OptionSetValue industrycode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("industrycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("industrycode", value, "industrycode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string industrycode_Text(IOrganizationService service)
        {
            return this.industrycode_OptionSetValue.GetOptionSetText(service, this, "industrycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string industrycode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.industrycode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: isprivate</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("isprivate")]
        public bool? isprivate
        {
            get
            {
                return this.GetPropertyValue<bool?>("isprivate");
            }
        }


        /// <summary>
        /// <para>Logical Name: lastonholdtime</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? lastonholdtime
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("lastonholdtime");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("lastonholdtime", value, "lastonholdtime");
            }
        }

        /// <summary>
        /// <para>Logical Name: lastusedincampaign</para>
        /// </summary>
        [AttributeLogicalName("lastusedincampaign")]
        public DateTime? lastusedincampaign
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("lastusedincampaign");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("lastusedincampaign", value, "lastusedincampaign");
            }
        }

        /// <summary>
        /// <para>Logical Name: marketcap</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        public decimal? marketcap
        {
            get
            {
                if (marketcapMoney != null) { return marketcapMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.marketcapMoney = new Money(value.Value); }
                else this.marketcapMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: marketcap</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("marketcap")]
        public Money marketcapMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("marketcap");
            }
            set
            {
                this.SetPropertyValue("marketcap", (Money)value, (decimal)0, (decimal)100000000000000, "marketcapMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: marketcap_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        public decimal? marketcap_base
        {
            get
            {
                if (marketcap_baseMoney != null) { return marketcap_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: marketcap_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("marketcap_base")]
        public Money marketcap_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("marketcap_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: marketingonly</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("marketingonly")]
        public bool? marketingonly
        {
            get
            {
                return this.GetPropertyValue<bool?>("marketingonly");
            }
            set
            {
                this.SetPropertyValue<bool?>("marketingonly", value, "marketingonly");
            }
        }


        /// <summary>
        /// <para>Logical Name: masteraccountidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("masteraccountidname")]
        public string masteraccountidname
        {
            get
            {
                return this.GetPropertyValue<string>("masteraccountidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: masteraccountidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("masteraccountidyominame")]
        public string masteraccountidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("masteraccountidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: masterid</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference masterid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("masterid");
            }
        }

        /// <summary>
        /// <para>Logical Name: merged</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? merged
        {
            get
            {
                return this.GetPropertyValue<bool?>("merged");
            }
        }


        /// <summary>
        /// <para>Logical Name: modifiedby</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference modifiedby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference modifiedbyexternalparty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string modifiedbyexternalpartyname
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyyominame")]
        public string modifiedbyexternalpartyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string modifiedbyname
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyyominame")]
        public string modifiedbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedon</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? modifiedon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("modifiedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference modifiedonbehalfby
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string modifiedonbehalfbyname
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        public string modifiedonbehalfbyyominame
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: name</para>
        /// <para>Max Length: 160 characters</para>
        /// </summary>
        [AttributeLogicalName("name")]
        public string name
        {
            get
            {
                return this.GetPropertyValue<string>("name");
            }
            set
            {
                this.SetPropertyValue("name", value, 160, "name");
            }
        }

        /// <summary>
        /// <para>Logical Name: numberofemployees</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("numberofemployees")]
        public int? numberofemployees
        {
            get
            {
                return this.GetPropertyValue<int?>("numberofemployees");
            }
            set
            {
                this.SetPropertyValue("numberofemployees", (int?)value, (int)0, (int)1000000000, "numberofemployees");
            }
        }

        /// <summary>
        /// <para>Logical Name: onholdtime</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? onholdtime
        {
            get
            {
                return this.GetPropertyValue<int?>("onholdtime");
            }
        }

        /// <summary>
        /// <para>Logical Name: opendeals</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("opendeals")]
        public int? opendeals
        {
            get
            {
                return this.GetPropertyValue<int?>("opendeals");
            }
        }

        /// <summary>
        /// <para>Logical Name: opendeals_date</para>
        /// </summary>
        [AttributeLogicalName("opendeals_date")]
        public DateTime? opendeals_date
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("opendeals_date");
            }
        }

        /// <summary>
        /// <para>Logical Name: opendeals_state</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("opendeals_state")]
        public int? opendeals_state
        {
            get
            {
                return this.GetPropertyValue<int?>("opendeals_state");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        public decimal? openrevenue
        {
            get
            {
                if (openrevenueMoney != null) { return openrevenueMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: openrevenue</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue")]
        public Money openrevenueMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("openrevenue");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        public decimal? openrevenue_base
        {
            get
            {
                if (openrevenue_baseMoney != null) { return openrevenue_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: openrevenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_base")]
        public Money openrevenue_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("openrevenue_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue_date</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_date")]
        public DateTime? openrevenue_date
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("openrevenue_date");
            }
        }

        /// <summary>
        /// <para>Logical Name: openrevenue_state</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("openrevenue_state")]
        public int? openrevenue_state
        {
            get
            {
                return this.GetPropertyValue<int?>("openrevenue_state");
            }
        }

        /// <summary>
        /// <para>Logical Name: originatingleadid</para>
        /// </summary>
        [AttributeLogicalName("originatingleadid")]
        public EntityReference originatingleadid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("originatingleadid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("originatingleadid", value, "originatingleadid");
            }
        }

        /// <summary>
        /// <para>Logical Name: originatingleadidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("originatingleadidname")]
        public string originatingleadidname
        {
            get
            {
                return this.GetPropertyValue<string>("originatingleadidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: originatingleadidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("originatingleadidyominame")]
        public string originatingleadidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("originatingleadidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: overriddencreatedon</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? overriddencreatedon
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("overriddencreatedon");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("overriddencreatedon", value, "overriddencreatedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: ownerid</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference ownerid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("ownerid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("ownerid", value, "ownerid");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string owneridname
        {
            get
            {
                return this.GetPropertyValue<string>("owneridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridtype</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string owneridtype
        {
            get
            {
                return this.GetPropertyValue<string>("owneridtype");
            }
            set
            {
                this.SetPropertyValue<string>("owneridtype", value, "owneridtype");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridyominame")]
        public string owneridyominame
        {
            get
            {
                return this.GetPropertyValue<string>("owneridyominame");
            }
        }

        /// <summary>
        /// Logical Name: ownershipcode
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        public eAccount_ownershipcode? ownershipcode
        {
            get
            {
                if (ownershipcode_OptionSetValue != null) { return (eAccount_ownershipcode)ownershipcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ownershipcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.ownershipcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: ownershipcode</para>
        /// </summary>
        [AttributeLogicalName("ownershipcode")]
        public OptionSetValue ownershipcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("ownershipcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("ownershipcode", value, "ownershipcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string ownershipcode_Text(IOrganizationService service)
        {
            return this.ownershipcode_OptionSetValue.GetOptionSetText(service, this, "ownershipcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ownershipcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ownershipcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: owningbusinessunit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference owningbusinessunit
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningbusinessunit");
            }
        }

        /// <summary>
        /// <para>Logical Name: owningteam</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference owningteam
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningteam");
            }
        }

        /// <summary>
        /// <para>Logical Name: owninguser</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference owninguser
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owninguser");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentaccountid</para>
        /// </summary>
        [AttributeLogicalName("parentaccountid")]
        public EntityReference parentaccountid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("parentaccountid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("parentaccountid", value, "parentaccountid");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentaccountidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("parentaccountidname")]
        public string parentaccountidname
        {
            get
            {
                return this.GetPropertyValue<string>("parentaccountidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentaccountidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("parentaccountidyominame")]
        public string parentaccountidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("parentaccountidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: participatesinworkflow</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("participatesinworkflow")]
        public bool? participatesinworkflow
        {
            get
            {
                return this.GetPropertyValue<bool?>("participatesinworkflow");
            }
            set
            {
                this.SetPropertyValue<bool?>("participatesinworkflow", value, "participatesinworkflow");
            }
        }


        /// <summary>
        /// Logical Name: paymenttermscode
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public eAccount_paymenttermscode? paymenttermscode
        {
            get
            {
                if (paymenttermscode_OptionSetValue != null) { return (eAccount_paymenttermscode)paymenttermscode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.paymenttermscode_OptionSetValue = new OptionSetValue((int)value); }
                else this.paymenttermscode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: paymenttermscode</para>
        /// </summary>
        [AttributeLogicalName("paymenttermscode")]
        public OptionSetValue paymenttermscode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("paymenttermscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("paymenttermscode", value, "paymenttermscode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string paymenttermscode_Text(IOrganizationService service)
        {
            return this.paymenttermscode_OptionSetValue.GetOptionSetText(service, this, "paymenttermscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string paymenttermscode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.paymenttermscode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: preferredappointmentdaycode
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public eAccount_preferredappointmentdaycode? preferredappointmentdaycode
        {
            get
            {
                if (preferredappointmentdaycode_OptionSetValue != null) { return (eAccount_preferredappointmentdaycode)preferredappointmentdaycode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.preferredappointmentdaycode_OptionSetValue = new OptionSetValue((int)value); }
                else this.preferredappointmentdaycode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: preferredappointmentdaycode</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmentdaycode")]
        public OptionSetValue preferredappointmentdaycode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("preferredappointmentdaycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("preferredappointmentdaycode", value, "preferredappointmentdaycode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string preferredappointmentdaycode_Text(IOrganizationService service)
        {
            return this.preferredappointmentdaycode_OptionSetValue.GetOptionSetText(service, this, "preferredappointmentdaycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string preferredappointmentdaycode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.preferredappointmentdaycode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: preferredappointmenttimecode
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public eAccount_preferredappointmenttimecode? preferredappointmenttimecode
        {
            get
            {
                if (preferredappointmenttimecode_OptionSetValue != null) { return (eAccount_preferredappointmenttimecode)preferredappointmenttimecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.preferredappointmenttimecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.preferredappointmenttimecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: preferredappointmenttimecode</para>
        /// </summary>
        [AttributeLogicalName("preferredappointmenttimecode")]
        public OptionSetValue preferredappointmenttimecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("preferredappointmenttimecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("preferredappointmenttimecode", value, "preferredappointmenttimecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string preferredappointmenttimecode_Text(IOrganizationService service)
        {
            return this.preferredappointmenttimecode_OptionSetValue.GetOptionSetText(service, this, "preferredappointmenttimecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string preferredappointmenttimecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.preferredappointmenttimecode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: preferredcontactmethodcode
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public eAccount_preferredcontactmethodcode? preferredcontactmethodcode
        {
            get
            {
                if (preferredcontactmethodcode_OptionSetValue != null) { return (eAccount_preferredcontactmethodcode)preferredcontactmethodcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.preferredcontactmethodcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.preferredcontactmethodcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: preferredcontactmethodcode</para>
        /// </summary>
        [AttributeLogicalName("preferredcontactmethodcode")]
        public OptionSetValue preferredcontactmethodcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("preferredcontactmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("preferredcontactmethodcode", value, "preferredcontactmethodcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string preferredcontactmethodcode_Text(IOrganizationService service)
        {
            return this.preferredcontactmethodcode_OptionSetValue.GetOptionSetText(service, this, "preferredcontactmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string preferredcontactmethodcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.preferredcontactmethodcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: preferredequipmentid</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentid")]
        public EntityReference preferredequipmentid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("preferredequipmentid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("preferredequipmentid", value, "preferredequipmentid");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredequipmentidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredequipmentidname")]
        public string preferredequipmentidname
        {
            get
            {
                return this.GetPropertyValue<string>("preferredequipmentidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredserviceid</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceid")]
        public EntityReference preferredserviceid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("preferredserviceid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("preferredserviceid", value, "preferredserviceid");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredserviceidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredserviceidname")]
        public string preferredserviceidname
        {
            get
            {
                return this.GetPropertyValue<string>("preferredserviceidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredsystemuserid</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuserid")]
        public EntityReference preferredsystemuserid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("preferredsystemuserid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("preferredsystemuserid", value, "preferredsystemuserid");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredsystemuseridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuseridname")]
        public string preferredsystemuseridname
        {
            get
            {
                return this.GetPropertyValue<string>("preferredsystemuseridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: preferredsystemuseridyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("preferredsystemuseridyominame")]
        public string preferredsystemuseridyominame
        {
            get
            {
                return this.GetPropertyValue<string>("preferredsystemuseridyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactid</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference primarycontactid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("primarycontactid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("primarycontactid", value, "primarycontactid");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidname")]
        public string primarycontactidname
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidyominame")]
        public string primarycontactidyominame
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarysatoriid</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("primarysatoriid")]
        public string primarysatoriid
        {
            get
            {
                return this.GetPropertyValue<string>("primarysatoriid");
            }
            set
            {
                this.SetPropertyValue("primarysatoriid", value, 200, "primarysatoriid");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarytwitterid</para>
        /// <para>Max Length: 128 characters</para>
        /// </summary>
        [AttributeLogicalName("primarytwitterid")]
        public string primarytwitterid
        {
            get
            {
                return this.GetPropertyValue<string>("primarytwitterid");
            }
            set
            {
                this.SetPropertyValue("primarytwitterid", value, 128, "primarytwitterid");
            }
        }

        /// <summary>
        /// <para>Logical Name: processid</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid processid
        {
            get
            {
                return this.GetPropertyValue<Guid>("processid");
            }
            set
            {
                this.SetPropertyValue<Guid>("processid", value, "processid");
            }
        }

        /// <summary>
        /// <para>Logical Name: revenue</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public decimal? revenue
        {
            get
            {
                if (revenueMoney != null) { return revenueMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.revenueMoney = new Money(value.Value); }
                else this.revenueMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: revenue</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 100000000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("revenue")]
        public Money revenueMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("revenue");
            }
            set
            {
                this.SetPropertyValue("revenue", (Money)value, (decimal)0, (decimal)100000000000000, "revenueMoney");
            }
        }

        /// <summary>
        /// <para>Logical Name: revenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public decimal? revenue_base
        {
            get
            {
                if (revenue_baseMoney != null) { return revenue_baseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: revenue_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("revenue_base")]
        public Money revenue_baseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("revenue_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: sharesoutstanding</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("sharesoutstanding")]
        public int? sharesoutstanding
        {
            get
            {
                return this.GetPropertyValue<int?>("sharesoutstanding");
            }
            set
            {
                this.SetPropertyValue("sharesoutstanding", (int?)value, (int)0, (int)1000000000, "sharesoutstanding");
            }
        }

        /// <summary>
        /// Logical Name: shippingmethodcode
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public eAccount_shippingmethodcode? shippingmethodcode
        {
            get
            {
                if (shippingmethodcode_OptionSetValue != null) { return (eAccount_shippingmethodcode)shippingmethodcode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.shippingmethodcode_OptionSetValue = new OptionSetValue((int)value); }
                else this.shippingmethodcode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: shippingmethodcode</para>
        /// </summary>
        [AttributeLogicalName("shippingmethodcode")]
        public OptionSetValue shippingmethodcode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("shippingmethodcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("shippingmethodcode", value, "shippingmethodcode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string shippingmethodcode_Text(IOrganizationService service)
        {
            return this.shippingmethodcode_OptionSetValue.GetOptionSetText(service, this, "shippingmethodcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string shippingmethodcode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.shippingmethodcode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: sic</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("sic")]
        public string sic
        {
            get
            {
                return this.GetPropertyValue<string>("sic");
            }
            set
            {
                this.SetPropertyValue("sic", value, 20, "sic");
            }
        }

        /// <summary>
        /// <para>Logical Name: slaid</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference slaid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slaid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("slaid", value, "slaid");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedid</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference slainvokedid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slainvokedid");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slainvokedidname")]
        public string slainvokedidname
        {
            get
            {
                return this.GetPropertyValue<string>("slainvokedidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: slaname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slaname")]
        public string slaname
        {
            get
            {
                return this.GetPropertyValue<string>("slaname");
            }
        }

        /// <summary>
        /// <para>Logical Name: stageid</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid stageid
        {
            get
            {
                return this.GetPropertyValue<Guid>("stageid");
            }
            set
            {
                this.SetPropertyValue<Guid>("stageid", value, "stageid");
            }
        }

        /// <summary>
        /// Logical Name: statecode
        /// </summary>
        [AttributeLogicalName("statecode")]
        public eAccount_statecode? statecode
        {
            get
            {
                if (statecode_OptionSetValue != null) { return (eAccount_statecode)statecode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.statecode_OptionSetValue = new OptionSetValue((int)value); }
                else this.statecode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statecode</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OptionSetValue statecode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statecode", value, "statecode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string statecode_Text(IOrganizationService service)
        {
            return this.statecode_OptionSetValue.GetOptionSetText(service, this, "statecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string statecode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.statecode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: statuscode
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public eAccount_statuscode? statuscode
        {
            get
            {
                if (statuscode_OptionSetValue != null) { return (eAccount_statuscode)statuscode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.statuscode_OptionSetValue = new OptionSetValue((int)value); }
                else this.statuscode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statuscode</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OptionSetValue statuscode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statuscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statuscode", value, "statuscode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string statuscode_Text(IOrganizationService service)
        {
            return this.statuscode_OptionSetValue.GetOptionSetText(service, this, "statuscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string statuscode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.statuscode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: stockexchange</para>
        /// <para>Max Length: 20 characters</para>
        /// </summary>
        [AttributeLogicalName("stockexchange")]
        public string stockexchange
        {
            get
            {
                return this.GetPropertyValue<string>("stockexchange");
            }
            set
            {
                this.SetPropertyValue("stockexchange", value, 20, "stockexchange");
            }
        }

        /// <summary>
        /// <para>Logical Name: teamsfollowed</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("teamsfollowed")]
        public int? teamsfollowed
        {
            get
            {
                return this.GetPropertyValue<int?>("teamsfollowed");
            }
            set
            {
                this.SetPropertyValue("teamsfollowed", (int?)value, (int)-2147483648, (int)2147483647, "teamsfollowed");
            }
        }

        /// <summary>
        /// <para>Logical Name: telephone1</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("telephone1")]
        public string telephone1
        {
            get
            {
                return this.GetPropertyValue<string>("telephone1");
            }
            set
            {
                this.SetPropertyValue("telephone1", value, 50, "telephone1");
            }
        }

        /// <summary>
        /// <para>Logical Name: telephone2</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("telephone2")]
        public string telephone2
        {
            get
            {
                return this.GetPropertyValue<string>("telephone2");
            }
            set
            {
                this.SetPropertyValue("telephone2", value, 50, "telephone2");
            }
        }

        /// <summary>
        /// <para>Logical Name: telephone3</para>
        /// <para>Max Length: 50 characters</para>
        /// </summary>
        [AttributeLogicalName("telephone3")]
        public string telephone3
        {
            get
            {
                return this.GetPropertyValue<string>("telephone3");
            }
            set
            {
                this.SetPropertyValue("telephone3", value, 50, "telephone3");
            }
        }

        /// <summary>
        /// Logical Name: territorycode
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public eAccount_territorycode? territorycode
        {
            get
            {
                if (territorycode_OptionSetValue != null) { return (eAccount_territorycode)territorycode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.territorycode_OptionSetValue = new OptionSetValue((int)value); }
                else this.territorycode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: territorycode</para>
        /// </summary>
        [AttributeLogicalName("territorycode")]
        public OptionSetValue territorycode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("territorycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("territorycode", value, "territorycode_OptionSetValue");
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="Service">CRM Organization Service</param>
        /// <returns></returns>
        public string territorycode_Text(IOrganizationService service)
        {
            return this.territorycode_OptionSetValue.GetOptionSetText(service, this, "territorycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="AttributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string territorycode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.territorycode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: territoryid</para>
        /// </summary>
        [AttributeLogicalName("territoryid")]
        public EntityReference territoryid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("territoryid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("territoryid", value, "territoryid");
            }
        }

        /// <summary>
        /// <para>Logical Name: territoryidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("territoryidname")]
        public string territoryidname
        {
            get
            {
                return this.GetPropertyValue<string>("territoryidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tickersymbol</para>
        /// <para>Max Length: 10 characters</para>
        /// </summary>
        [AttributeLogicalName("tickersymbol")]
        public string tickersymbol
        {
            get
            {
                return this.GetPropertyValue<string>("tickersymbol");
            }
            set
            {
                this.SetPropertyValue("tickersymbol", value, 10, "tickersymbol");
            }
        }

        /// <summary>
        /// <para>Logical Name: timespentbymeonemailandmeetings</para>
        /// <para>Max Length: 1250 characters</para>
        /// </summary>
        [AttributeLogicalName("timespentbymeonemailandmeetings")]
        public string timespentbymeonemailandmeetings
        {
            get
            {
                return this.GetPropertyValue<string>("timespentbymeonemailandmeetings");
            }
        }

        /// <summary>
        /// <para>Logical Name: timezoneruleversionnumber</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? timezoneruleversionnumber
        {
            get
            {
                return this.GetPropertyValue<int?>("timezoneruleversionnumber");
            }
            set
            {
                this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, "timezoneruleversionnumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: transactioncurrencyid</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference transactioncurrencyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("transactioncurrencyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, "transactioncurrencyid");
            }
        }

        /// <summary>
        /// <para>Logical Name: transactioncurrencyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyidname")]
        public string transactioncurrencyidname
        {
            get
            {
                return this.GetPropertyValue<string>("transactioncurrencyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: traversedpath</para>
        /// <para>Max Length: 1250 characters</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string traversedpath
        {
            get
            {
                return this.GetPropertyValue<string>("traversedpath");
            }
            set
            {
                this.SetPropertyValue("traversedpath", value, 1250, "traversedpath");
            }
        }

        /// <summary>
        /// <para>Logical Name: utcconversiontimezonecode</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? utcconversiontimezonecode
        {
            get
            {
                return this.GetPropertyValue<int?>("utcconversiontimezonecode");
            }
            set
            {
                this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, "utcconversiontimezonecode");
            }
        }

        /// <summary>
        /// <para>Logical Name: versionnumber</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public int? versionnumber
        {
            get
            {
                return this.GetPropertyValue<int?>("versionnumber");
            }
        }

        /// <summary>
        /// <para>Logical Name: websiteurl</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("websiteurl")]
        public string websiteurl
        {
            get
            {
                return this.GetPropertyValue<string>("websiteurl");
            }
            set
            {
                this.SetPropertyValue("websiteurl", value, 200, "websiteurl");
            }
        }

        /// <summary>
        /// <para>Logical Name: yominame</para>
        /// <para>Max Length: 160 characters</para>
        /// </summary>
        [AttributeLogicalName("yominame")]
        public string yominame
        {
            get
            {
                return this.GetPropertyValue<string>("yominame");
            }
            set
            {
                this.SetPropertyValue("yominame", value, 160, "yominame");
            }
        }


        /// <summary>
        /// <para><b>account (Master ID)</b></para>
        /// <para>Schema Name: account_master_account</para>
        /// </summary>
        public List<account> Getaccount_master_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<account>(service, this.Id, "account", "masterid", columns); }

        /// <summary>
        /// <para><b>account (Master ID)</b></para>
        /// <para>Schema Name: account_master_account</para>
        /// </summary>
        public List<account> Getaccount_master_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<account>(service, this.Id, "account", "masterid", columns); }

        /// <summary>
        /// <para><b>account (Parent Account)</b></para>
        /// <para>Schema Name: account_parent_account</para>
        /// </summary>
        public List<account> Getaccount_parent_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<account>(service, this.Id, "account", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>account (Parent Account)</b></para>
        /// <para>Schema Name: account_parent_account</para>
        /// </summary>
        public List<account> Getaccount_parent_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<account>(service, this.Id, "account", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_actioncard</para>
        /// </summary>
        public List<Entity> Getaccount_actioncard(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_actioncard</para>
        /// </summary>
        public List<Entity> Getaccount_actioncard(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_activity_parties</para>
        /// </summary>
        public List<Entity> Getaccount_activity_parties(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_activity_parties</para>
        /// </summary>
        public List<Entity> Getaccount_activity_parties(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetAccount_ActivityPointers(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetAccount_ActivityPointers(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Annotation</para>
        /// </summary>
        public List<Entity> GetAccount_Annotation(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Annotation</para>
        /// </summary>
        public List<Entity> GetAccount_Annotation(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Appointments</para>
        /// </summary>
        public List<Entity> GetAccount_Appointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Appointments</para>
        /// </summary>
        public List<Entity> GetAccount_Appointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetAccount_AsyncOperations(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetAccount_AsyncOperations(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_bookableresource_AccountId</para>
        /// </summary>
        public List<Entity> Getaccount_bookableresource_AccountId(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bookableresource", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_bookableresource_AccountId</para>
        /// </summary>
        public List<Entity> Getaccount_bookableresource_AccountId(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bookableresource", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetAccount_BulkDeleteFailures(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetAccount_BulkDeleteFailures(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_BulkOperations</para>
        /// </summary>
        public List<Entity> Getaccount_BulkOperations(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_BulkOperations</para>
        /// </summary>
        public List<Entity> Getaccount_BulkOperations(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: CreatedAccount_BulkOperationLogs2</para>
        /// </summary>
        public List<Entity> GetCreatedAccount_BulkOperationLogs2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "createdobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: CreatedAccount_BulkOperationLogs2</para>
        /// </summary>
        public List<Entity> GetCreatedAccount_BulkOperationLogs2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "createdobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SourceAccount_BulkOperationLogs</para>
        /// </summary>
        public List<Entity> GetSourceAccount_BulkOperationLogs(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SourceAccount_BulkOperationLogs</para>
        /// </summary>
        public List<Entity> GetSourceAccount_BulkOperationLogs(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkoperationlog", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_CampaignResponses</para>
        /// </summary>
        public List<Entity> Getaccount_CampaignResponses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "campaignresponse", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_CampaignResponses</para>
        /// </summary>
        public List<Entity> Getaccount_CampaignResponses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "campaignresponse", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections1</para>
        /// </summary>
        public List<Entity> Getaccount_connections1(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections1</para>
        /// </summary>
        public List<Entity> Getaccount_connections1(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections2</para>
        /// </summary>
        public List<Entity> Getaccount_connections2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_connections2</para>
        /// </summary>
        public List<Entity> Getaccount_connections2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contact_customer_accounts</para>
        /// </summary>
        public List<Entity> Getcontact_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contact", "parentcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contact_customer_accounts</para>
        /// </summary>
        public List<Entity> Getcontact_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contact", "parentcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_billingcustomer_accounts</para>
        /// </summary>
        public List<Entity> Getcontract_billingcustomer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "billingcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_billingcustomer_accounts</para>
        /// </summary>
        public List<Entity> Getcontract_billingcustomer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "billingcustomerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_customer_accounts</para>
        /// </summary>
        public List<Entity> Getcontract_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contract_customer_accounts</para>
        /// </summary>
        public List<Entity> Getcontract_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contract", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contractlineitem_customer_accounts</para>
        /// </summary>
        public List<Entity> Getcontractlineitem_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contractdetail", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: contractlineitem_customer_accounts</para>
        /// </summary>
        public List<Entity> Getcontractlineitem_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "contractdetail", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_CustomerAddress</para>
        /// </summary>
        public List<Entity> GetAccount_CustomerAddress(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeraddress", "parentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_CustomerAddress</para>
        /// </summary>
        public List<Entity> GetAccount_CustomerAddress(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeraddress", "parentid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_opportunity_roles</para>
        /// </summary>
        public List<Entity> Getaccount_customer_opportunity_roles(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeropportunityrole", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_opportunity_roles</para>
        /// </summary>
        public List<Entity> Getaccount_customer_opportunity_roles(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customeropportunityrole", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_customer</para>
        /// </summary>
        public List<Entity> Getaccount_customer_relationship_customer(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_customer</para>
        /// </summary>
        public List<Entity> Getaccount_customer_relationship_customer(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_partner</para>
        /// </summary>
        public List<Entity> Getaccount_customer_relationship_partner(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "partnerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_customer_relationship_partner</para>
        /// </summary>
        public List<Entity> Getaccount_customer_relationship_partner(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "customerrelationship", "partnerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetAccount_DuplicateBaseRecord(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetAccount_DuplicateBaseRecord(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetAccount_DuplicateMatchingRecord(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetAccount_DuplicateMatchingRecord(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_EmailSender</para>
        /// </summary>
        public List<Entity> GetAccount_Email_EmailSender(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "emailsender", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_EmailSender</para>
        /// </summary>
        public List<Entity> GetAccount_Email_EmailSender(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "emailsender", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_SendersAccount</para>
        /// </summary>
        public List<Entity> GetAccount_Email_SendersAccount(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "sendersaccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Email_SendersAccount</para>
        /// </summary>
        public List<Entity> GetAccount_Email_SendersAccount(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "sendersaccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Emails</para>
        /// </summary>
        public List<Entity> GetAccount_Emails(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Emails</para>
        /// </summary>
        public List<Entity> GetAccount_Emails(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Account</para>
        /// </summary>
        public List<Entity> Getaccount_entitlement_Account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Account</para>
        /// </summary>
        public List<Entity> Getaccount_entitlement_Account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "accountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Customer</para>
        /// </summary>
        public List<Entity> Getaccount_entitlement_Customer(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_entitlement_Customer</para>
        /// </summary>
        public List<Entity> Getaccount_entitlement_Customer(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "entitlement", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Faxes</para>
        /// </summary>
        public List<Entity> GetAccount_Faxes(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Faxes</para>
        /// </summary>
        public List<Entity> GetAccount_Faxes(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>incident (Customer)</b></para>
        /// <para>Schema Name: incident_customer_accounts</para>
        /// </summary>
        public List<incident> Getincident_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "customerid", columns); }

        /// <summary>
        /// <para><b>incident (Customer)</b></para>
        /// <para>Schema Name: incident_customer_accounts</para>
        /// </summary>
        public List<incident> Getincident_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities<incident>(service, this.Id, "incident", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_IncidentResolutions</para>
        /// </summary>
        public List<Entity> Getaccount_IncidentResolutions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incidentresolution", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_IncidentResolutions</para>
        /// </summary>
        public List<Entity> Getaccount_IncidentResolutions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incidentresolution", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: invoice_customer_accounts</para>
        /// </summary>
        public List<Entity> Getinvoice_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "invoice", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: invoice_customer_accounts</para>
        /// </summary>
        public List<Entity> Getinvoice_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "invoice", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_customer_accounts</para>
        /// </summary>
        public List<Entity> Getlead_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_customer_accounts</para>
        /// </summary>
        public List<Entity> Getlead_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_parent_account</para>
        /// </summary>
        public List<Entity> Getlead_parent_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: lead_parent_account</para>
        /// </summary>
        public List<Entity> Getlead_parent_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Letters</para>
        /// </summary>
        public List<Entity> GetAccount_Letters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Letters</para>
        /// </summary>
        public List<Entity> GetAccount_Letters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_li_inmails</para>
        /// </summary>
        public List<Entity> Getaccount_li_inmails(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_inmail", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_li_inmails</para>
        /// </summary>
        public List<Entity> Getaccount_li_inmails(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_inmail", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_li_messages</para>
        /// </summary>
        public List<Entity> Getaccount_li_messages(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_message", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_li_messages</para>
        /// </summary>
        public List<Entity> Getaccount_li_messages(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_message", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_li_pointdrivepresentationvieweds</para>
        /// </summary>
        public List<Entity> Getaccount_li_pointdrivepresentationvieweds(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_pointdrivepresentationviewed", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_li_pointdrivepresentationvieweds</para>
        /// </summary>
        public List<Entity> Getaccount_li_pointdrivepresentationvieweds(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "li_pointdrivepresentationviewed", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetAccount_MailboxTrackingFolder(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetAccount_MailboxTrackingFolder(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: msdyn_playbookinstance_account</para>
        /// </summary>
        public List<Entity> Getmsdyn_playbookinstance_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msdyn_playbookinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: msdyn_playbookinstance_account</para>
        /// </summary>
        public List<Entity> Getmsdyn_playbookinstance_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msdyn_playbookinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_msfp_surveyinvites</para>
        /// </summary>
        public List<Entity> Getaccount_msfp_surveyinvites(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyinvite", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_msfp_surveyinvites</para>
        /// </summary>
        public List<Entity> Getaccount_msfp_surveyinvites(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyinvite", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_msfp_surveyresponses</para>
        /// </summary>
        public List<Entity> Getaccount_msfp_surveyresponses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyresponse", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_msfp_surveyresponses</para>
        /// </summary>
        public List<Entity> Getaccount_msfp_surveyresponses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "msfp_surveyresponse", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_customer_accounts</para>
        /// </summary>
        public List<Entity> Getopportunity_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_customer_accounts</para>
        /// </summary>
        public List<Entity> Getopportunity_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_parent_account</para>
        /// </summary>
        public List<Entity> Getopportunity_parent_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: opportunity_parent_account</para>
        /// </summary>
        public List<Entity> Getopportunity_parent_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunity", "parentaccountid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_OpportunityCloses</para>
        /// </summary>
        public List<Entity> Getaccount_OpportunityCloses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunityclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_OpportunityCloses</para>
        /// </summary>
        public List<Entity> Getaccount_OpportunityCloses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "opportunityclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_OrderCloses</para>
        /// </summary>
        public List<Entity> Getaccount_OrderCloses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "orderclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_OrderCloses</para>
        /// </summary>
        public List<Entity> Getaccount_OrderCloses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "orderclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Phonecalls</para>
        /// </summary>
        public List<Entity> GetAccount_Phonecalls(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Phonecalls</para>
        /// </summary>
        public List<Entity> GetAccount_Phonecalls(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostFollows</para>
        /// </summary>
        public List<Entity> Getaccount_PostFollows(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostFollows</para>
        /// </summary>
        public List<Entity> Getaccount_PostFollows(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRegardings</para>
        /// </summary>
        public List<Entity> Getaccount_PostRegardings(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRegardings</para>
        /// </summary>
        public List<Entity> Getaccount_PostRegardings(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRoles</para>
        /// </summary>
        public List<Entity> Getaccount_PostRoles(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_PostRoles</para>
        /// </summary>
        public List<Entity> Getaccount_PostRoles(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> Getaccount_principalobjectattributeaccess(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> Getaccount_principalobjectattributeaccess(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetAccount_ProcessSessions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetAccount_ProcessSessions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: quote_customer_accounts</para>
        /// </summary>
        public List<Entity> Getquote_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quote", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: quote_customer_accounts</para>
        /// </summary>
        public List<Entity> Getquote_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quote", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_QuoteCloses</para>
        /// </summary>
        public List<Entity> Getaccount_QuoteCloses(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quoteclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: account_QuoteCloses</para>
        /// </summary>
        public List<Entity> Getaccount_QuoteCloses(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "quoteclose", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetAccount_RecurringAppointmentMasters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetAccount_RecurringAppointmentMasters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: order_customer_accounts</para>
        /// </summary>
        public List<Entity> Getorder_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "salesorder", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: order_customer_accounts</para>
        /// </summary>
        public List<Entity> Getorder_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "salesorder", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetAccount_ServiceAppointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetAccount_ServiceAppointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocument</para>
        /// </summary>
        public List<Entity> GetAccount_SharepointDocument(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocument", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocument</para>
        /// </summary>
        public List<Entity> GetAccount_SharepointDocument(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocument", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocumentLocation</para>
        /// </summary>
        public List<Entity> GetAccount_SharepointDocumentLocation(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocumentlocation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SharepointDocumentLocation</para>
        /// </summary>
        public List<Entity> GetAccount_SharepointDocumentLocation(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "sharepointdocumentlocation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: slakpiinstance_account</para>
        /// </summary>
        public List<Entity> Getslakpiinstance_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: slakpiinstance_account</para>
        /// </summary>
        public List<Entity> Getslakpiinstance_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SocialActivities</para>
        /// </summary>
        public List<Entity> GetAccount_SocialActivities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SocialActivities</para>
        /// </summary>
        public List<Entity> GetAccount_SocialActivities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthor_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivity_PostAuthor_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthor", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthor_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivity_PostAuthor_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthor", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthorAccount_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivity_PostAuthorAccount_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthoraccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: SocialActivity_PostAuthorAccount_accounts</para>
        /// </summary>
        public List<Entity> GetSocialActivity_PostAuthorAccount_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "postauthoraccount", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Socialprofile_customer_accounts</para>
        /// </summary>
        public List<Entity> GetSocialprofile_customer_accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialprofile", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Socialprofile_customer_accounts</para>
        /// </summary>
        public List<Entity> GetSocialprofile_customer_accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialprofile", "customerid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SyncErrors</para>
        /// </summary>
        public List<Entity> GetAccount_SyncErrors(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_SyncErrors</para>
        /// </summary>
        public List<Entity> GetAccount_SyncErrors(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Tasks</para>
        /// </summary>
        public List<Entity> GetAccount_Tasks(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: Account_Tasks</para>
        /// </summary>
        public List<Entity> GetAccount_Tasks(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: userentityinstancedata_account</para>
        /// </summary>
        public List<Entity> Getuserentityinstancedata_account(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity ()</b></para>
        /// <para>Schema Name: userentityinstancedata_account</para>
        /// </summary>
        public List<Entity> Getuserentityinstancedata_account(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }


        /// <summary>
        /// <para>Related Entity: <b>Lead</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: accountleads_association</para>
        /// </summary>
        public List<Entity> Getaccountleads_association(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "lead", "leadid", "accountleads", "leadid", "accountid", columns); }
        public List<Entity> Getaccountleads_association(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "lead", "leadid", "accountleads", "leadid", "accountid", columns); }
        public void Relateaccountleads_association(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "accountleads_association", items); }
        public void Relateaccountleads_association(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "accountleads_association", items); }
        public void UnRelateaccountleads_association(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "accountleads_association", items); }
        public void UnRelateaccountleads_association(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "accountleads_association", items); }
        /// <summary>
        /// <para>Related Entity: <b>Quick Campaign</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: BulkOperation_Accounts</para>
        /// </summary>
        public List<Entity> GetBulkOperation_Accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "bulkoperation", "activityid", "bulkoperationlog", "regardingobjectid", "bulkoperationid", columns); }
        public List<Entity> GetBulkOperation_Accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "bulkoperation", "activityid", "bulkoperationlog", "regardingobjectid", "bulkoperationid", columns); }
        public void RelateBulkOperation_Accounts(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "BulkOperation_Accounts", items); }
        public void RelateBulkOperation_Accounts(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "BulkOperation_Accounts", items); }
        public void UnRelateBulkOperation_Accounts(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "BulkOperation_Accounts", items); }
        public void UnRelateBulkOperation_Accounts(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "BulkOperation_Accounts", items); }
        /// <summary>
        /// <para>Related Entity: <b>Campaign Activity</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: CampaignActivity_Accounts</para>
        /// </summary>
        public List<Entity> GetCampaignActivity_Accounts(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "campaignactivity", "activityid", "bulkoperationlog", "regardingobjectid", "campaignactivityid", columns); }
        public List<Entity> GetCampaignActivity_Accounts(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "campaignactivity", "activityid", "bulkoperationlog", "regardingobjectid", "campaignactivityid", columns); }
        public void RelateCampaignActivity_Accounts(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "CampaignActivity_Accounts", items); }
        public void RelateCampaignActivity_Accounts(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "CampaignActivity_Accounts", items); }
        public void UnRelateCampaignActivity_Accounts(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "CampaignActivity_Accounts", items); }
        public void UnRelateCampaignActivity_Accounts(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "CampaignActivity_Accounts", items); }
        /// <summary>
        /// <para>Related Entity: <b>Marketing List</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: listaccount_association</para>
        /// </summary>
        public List<Entity> Getlistaccount_association(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "list", "listid", "listmember", "entityid", "listid", columns); }
        public List<Entity> Getlistaccount_association(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "account", "accountid", "list", "listid", "listmember", "entityid", "listid", columns); }
        public void Relatelistaccount_association(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "listaccount_association", items); }
        public void Relatelistaccount_association(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "listaccount_association", items); }
        public void UnRelatelistaccount_association(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "listaccount_association", items); }
        public void UnRelatelistaccount_association(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "listaccount_association", items); }

        
        
        public static class Properties
        {
            /// <summary>
            /// <para>Category</para>
            /// <para>Logical Name = accountcategorycode</para>
            /// </summary>
            public const string accountcategorycode = "accountcategorycode";

            /// <summary>
            /// <para>Logical Name = accountcategorycodename</para>
            /// </summary>
            public const string accountcategorycodename = "accountcategorycodename";

            /// <summary>
            /// <para>Classification</para>
            /// <para>Logical Name = accountclassificationcode</para>
            /// </summary>
            public const string accountclassificationcode = "accountclassificationcode";

            /// <summary>
            /// <para>Logical Name = accountclassificationcodename</para>
            /// </summary>
            public const string accountclassificationcodename = "accountclassificationcodename";

            /// <summary>
            /// <para>Account</para>
            /// <para>Logical Name = accountid</para>
            /// </summary>
            public const string accountid = "accountid";

            /// <summary>
            /// <para>Account Number</para>
            /// <para>Logical Name = accountnumber</para>
            /// </summary>
            public const string accountnumber = "accountnumber";

            /// <summary>
            /// <para>Account Rating</para>
            /// <para>Logical Name = accountratingcode</para>
            /// </summary>
            public const string accountratingcode = "accountratingcode";

            /// <summary>
            /// <para>Logical Name = accountratingcodename</para>
            /// </summary>
            public const string accountratingcodename = "accountratingcodename";

            /// <summary>
            /// <para>Address 1: ID</para>
            /// <para>Logical Name = address1_addressid</para>
            /// </summary>
            public const string address1_addressid = "address1_addressid";

            /// <summary>
            /// <para>Address 1: Address Type</para>
            /// <para>Logical Name = address1_addresstypecode</para>
            /// </summary>
            public const string address1_addresstypecode = "address1_addresstypecode";

            /// <summary>
            /// <para>Logical Name = address1_addresstypecodename</para>
            /// </summary>
            public const string address1_addresstypecodename = "address1_addresstypecodename";

            /// <summary>
            /// <para>Address 1: City</para>
            /// <para>Logical Name = address1_city</para>
            /// </summary>
            public const string address1_city = "address1_city";

            /// <summary>
            /// <para>Address 1</para>
            /// <para>Logical Name = address1_composite</para>
            /// </summary>
            public const string address1_composite = "address1_composite";

            /// <summary>
            /// <para>Address 1: Country/Region</para>
            /// <para>Logical Name = address1_country</para>
            /// </summary>
            public const string address1_country = "address1_country";

            /// <summary>
            /// <para>Address 1: County</para>
            /// <para>Logical Name = address1_county</para>
            /// </summary>
            public const string address1_county = "address1_county";

            /// <summary>
            /// <para>Address 1: Fax</para>
            /// <para>Logical Name = address1_fax</para>
            /// </summary>
            public const string address1_fax = "address1_fax";

            /// <summary>
            /// <para>Address 1: Freight Terms</para>
            /// <para>Logical Name = address1_freighttermscode</para>
            /// </summary>
            public const string address1_freighttermscode = "address1_freighttermscode";

            /// <summary>
            /// <para>Logical Name = address1_freighttermscodename</para>
            /// </summary>
            public const string address1_freighttermscodename = "address1_freighttermscodename";

            /// <summary>
            /// <para>Address 1: Latitude</para>
            /// <para>Logical Name = address1_latitude</para>
            /// </summary>
            public const string address1_latitude = "address1_latitude";

            /// <summary>
            /// <para>Address 1: Street 1</para>
            /// <para>Logical Name = address1_line1</para>
            /// </summary>
            public const string address1_line1 = "address1_line1";

            /// <summary>
            /// <para>Address 1: Street 2</para>
            /// <para>Logical Name = address1_line2</para>
            /// </summary>
            public const string address1_line2 = "address1_line2";

            /// <summary>
            /// <para>Address 1: Street 3</para>
            /// <para>Logical Name = address1_line3</para>
            /// </summary>
            public const string address1_line3 = "address1_line3";

            /// <summary>
            /// <para>Address 1: Longitude</para>
            /// <para>Logical Name = address1_longitude</para>
            /// </summary>
            public const string address1_longitude = "address1_longitude";

            /// <summary>
            /// <para>Address 1: Name</para>
            /// <para>Logical Name = address1_name</para>
            /// </summary>
            public const string address1_name = "address1_name";

            /// <summary>
            /// <para>Address 1: ZIP/Postal Code</para>
            /// <para>Logical Name = address1_postalcode</para>
            /// </summary>
            public const string address1_postalcode = "address1_postalcode";

            /// <summary>
            /// <para>Address 1: Post Office Box</para>
            /// <para>Logical Name = address1_postofficebox</para>
            /// </summary>
            public const string address1_postofficebox = "address1_postofficebox";

            /// <summary>
            /// <para>Address 1: Primary Contact Name</para>
            /// <para>Logical Name = address1_primarycontactname</para>
            /// </summary>
            public const string address1_primarycontactname = "address1_primarycontactname";

            /// <summary>
            /// <para>Address 1: Shipping Method</para>
            /// <para>Logical Name = address1_shippingmethodcode</para>
            /// </summary>
            public const string address1_shippingmethodcode = "address1_shippingmethodcode";

            /// <summary>
            /// <para>Logical Name = address1_shippingmethodcodename</para>
            /// </summary>
            public const string address1_shippingmethodcodename = "address1_shippingmethodcodename";

            /// <summary>
            /// <para>Address 1: State/Province</para>
            /// <para>Logical Name = address1_stateorprovince</para>
            /// </summary>
            public const string address1_stateorprovince = "address1_stateorprovince";

            /// <summary>
            /// <para>Address Phone</para>
            /// <para>Logical Name = address1_telephone1</para>
            /// </summary>
            public const string address1_telephone1 = "address1_telephone1";

            /// <summary>
            /// <para>Address 1: Telephone 2</para>
            /// <para>Logical Name = address1_telephone2</para>
            /// </summary>
            public const string address1_telephone2 = "address1_telephone2";

            /// <summary>
            /// <para>Address 1: Telephone 3</para>
            /// <para>Logical Name = address1_telephone3</para>
            /// </summary>
            public const string address1_telephone3 = "address1_telephone3";

            /// <summary>
            /// <para>Address 1: UPS Zone</para>
            /// <para>Logical Name = address1_upszone</para>
            /// </summary>
            public const string address1_upszone = "address1_upszone";

            /// <summary>
            /// <para>Address 1: UTC Offset</para>
            /// <para>Logical Name = address1_utcoffset</para>
            /// </summary>
            public const string address1_utcoffset = "address1_utcoffset";

            /// <summary>
            /// <para>Address 2: ID</para>
            /// <para>Logical Name = address2_addressid</para>
            /// </summary>
            public const string address2_addressid = "address2_addressid";

            /// <summary>
            /// <para>Address 2: Address Type</para>
            /// <para>Logical Name = address2_addresstypecode</para>
            /// </summary>
            public const string address2_addresstypecode = "address2_addresstypecode";

            /// <summary>
            /// <para>Logical Name = address2_addresstypecodename</para>
            /// </summary>
            public const string address2_addresstypecodename = "address2_addresstypecodename";

            /// <summary>
            /// <para>Address 2: City</para>
            /// <para>Logical Name = address2_city</para>
            /// </summary>
            public const string address2_city = "address2_city";

            /// <summary>
            /// <para>Address 2</para>
            /// <para>Logical Name = address2_composite</para>
            /// </summary>
            public const string address2_composite = "address2_composite";

            /// <summary>
            /// <para>Address 2: Country/Region</para>
            /// <para>Logical Name = address2_country</para>
            /// </summary>
            public const string address2_country = "address2_country";

            /// <summary>
            /// <para>Address 2: County</para>
            /// <para>Logical Name = address2_county</para>
            /// </summary>
            public const string address2_county = "address2_county";

            /// <summary>
            /// <para>Address 2: Fax</para>
            /// <para>Logical Name = address2_fax</para>
            /// </summary>
            public const string address2_fax = "address2_fax";

            /// <summary>
            /// <para>Address 2: Freight Terms</para>
            /// <para>Logical Name = address2_freighttermscode</para>
            /// </summary>
            public const string address2_freighttermscode = "address2_freighttermscode";

            /// <summary>
            /// <para>Logical Name = address2_freighttermscodename</para>
            /// </summary>
            public const string address2_freighttermscodename = "address2_freighttermscodename";

            /// <summary>
            /// <para>Address 2: Latitude</para>
            /// <para>Logical Name = address2_latitude</para>
            /// </summary>
            public const string address2_latitude = "address2_latitude";

            /// <summary>
            /// <para>Address 2: Street 1</para>
            /// <para>Logical Name = address2_line1</para>
            /// </summary>
            public const string address2_line1 = "address2_line1";

            /// <summary>
            /// <para>Address 2: Street 2</para>
            /// <para>Logical Name = address2_line2</para>
            /// </summary>
            public const string address2_line2 = "address2_line2";

            /// <summary>
            /// <para>Address 2: Street 3</para>
            /// <para>Logical Name = address2_line3</para>
            /// </summary>
            public const string address2_line3 = "address2_line3";

            /// <summary>
            /// <para>Address 2: Longitude</para>
            /// <para>Logical Name = address2_longitude</para>
            /// </summary>
            public const string address2_longitude = "address2_longitude";

            /// <summary>
            /// <para>Address 2: Name</para>
            /// <para>Logical Name = address2_name</para>
            /// </summary>
            public const string address2_name = "address2_name";

            /// <summary>
            /// <para>Address 2: ZIP/Postal Code</para>
            /// <para>Logical Name = address2_postalcode</para>
            /// </summary>
            public const string address2_postalcode = "address2_postalcode";

            /// <summary>
            /// <para>Address 2: Post Office Box</para>
            /// <para>Logical Name = address2_postofficebox</para>
            /// </summary>
            public const string address2_postofficebox = "address2_postofficebox";

            /// <summary>
            /// <para>Address 2: Primary Contact Name</para>
            /// <para>Logical Name = address2_primarycontactname</para>
            /// </summary>
            public const string address2_primarycontactname = "address2_primarycontactname";

            /// <summary>
            /// <para>Address 2: Shipping Method</para>
            /// <para>Logical Name = address2_shippingmethodcode</para>
            /// </summary>
            public const string address2_shippingmethodcode = "address2_shippingmethodcode";

            /// <summary>
            /// <para>Logical Name = address2_shippingmethodcodename</para>
            /// </summary>
            public const string address2_shippingmethodcodename = "address2_shippingmethodcodename";

            /// <summary>
            /// <para>Address 2: State/Province</para>
            /// <para>Logical Name = address2_stateorprovince</para>
            /// </summary>
            public const string address2_stateorprovince = "address2_stateorprovince";

            /// <summary>
            /// <para>Address 2: Telephone 1</para>
            /// <para>Logical Name = address2_telephone1</para>
            /// </summary>
            public const string address2_telephone1 = "address2_telephone1";

            /// <summary>
            /// <para>Address 2: Telephone 2</para>
            /// <para>Logical Name = address2_telephone2</para>
            /// </summary>
            public const string address2_telephone2 = "address2_telephone2";

            /// <summary>
            /// <para>Address 2: Telephone 3</para>
            /// <para>Logical Name = address2_telephone3</para>
            /// </summary>
            public const string address2_telephone3 = "address2_telephone3";

            /// <summary>
            /// <para>Address 2: UPS Zone</para>
            /// <para>Logical Name = address2_upszone</para>
            /// </summary>
            public const string address2_upszone = "address2_upszone";

            /// <summary>
            /// <para>Address 2: UTC Offset</para>
            /// <para>Logical Name = address2_utcoffset</para>
            /// </summary>
            public const string address2_utcoffset = "address2_utcoffset";

            /// <summary>
            /// <para>Aging 30</para>
            /// <para>Logical Name = aging30</para>
            /// </summary>
            public const string aging30 = "aging30";

            /// <summary>
            /// <para>Aging 30 (Base)</para>
            /// <para>Logical Name = aging30_base</para>
            /// </summary>
            public const string aging30_base = "aging30_base";

            /// <summary>
            /// <para>Aging 60</para>
            /// <para>Logical Name = aging60</para>
            /// </summary>
            public const string aging60 = "aging60";

            /// <summary>
            /// <para>Aging 60 (Base)</para>
            /// <para>Logical Name = aging60_base</para>
            /// </summary>
            public const string aging60_base = "aging60_base";

            /// <summary>
            /// <para>Aging 90</para>
            /// <para>Logical Name = aging90</para>
            /// </summary>
            public const string aging90 = "aging90";

            /// <summary>
            /// <para>Aging 90 (Base)</para>
            /// <para>Logical Name = aging90_base</para>
            /// </summary>
            public const string aging90_base = "aging90_base";

            /// <summary>
            /// <para>Business Type</para>
            /// <para>Logical Name = businesstypecode</para>
            /// </summary>
            public const string businesstypecode = "businesstypecode";

            /// <summary>
            /// <para>Logical Name = businesstypecodename</para>
            /// </summary>
            public const string businesstypecodename = "businesstypecodename";

            /// <summary>
            /// <para>Created By</para>
            /// <para>Logical Name = createdby</para>
            /// </summary>
            public const string createdby = "createdby";

            /// <summary>
            /// <para>Created By (External Party)</para>
            /// <para>Logical Name = createdbyexternalparty</para>
            /// </summary>
            public const string createdbyexternalparty = "createdbyexternalparty";

            /// <summary>
            /// <para>Logical Name = createdbyexternalpartyname</para>
            /// </summary>
            public const string createdbyexternalpartyname = "createdbyexternalpartyname";

            /// <summary>
            /// <para>Logical Name = createdbyexternalpartyyominame</para>
            /// </summary>
            public const string createdbyexternalpartyyominame = "createdbyexternalpartyyominame";

            /// <summary>
            /// <para>Logical Name = createdbyname</para>
            /// </summary>
            public const string createdbyname = "createdbyname";

            /// <summary>
            /// <para>Logical Name = createdbyyominame</para>
            /// </summary>
            public const string createdbyyominame = "createdbyyominame";

            /// <summary>
            /// <para>Created On</para>
            /// <para>Logical Name = createdon</para>
            /// </summary>
            public const string createdon = "createdon";

            /// <summary>
            /// <para>Created By (Delegate)</para>
            /// <para>Logical Name = createdonbehalfby</para>
            /// </summary>
            public const string createdonbehalfby = "createdonbehalfby";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyname</para>
            /// </summary>
            public const string createdonbehalfbyname = "createdonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = createdonbehalfbyyominame</para>
            /// </summary>
            public const string createdonbehalfbyyominame = "createdonbehalfbyyominame";

            /// <summary>
            /// <para>Credit Limit</para>
            /// <para>Logical Name = creditlimit</para>
            /// </summary>
            public const string creditlimit = "creditlimit";

            /// <summary>
            /// <para>Credit Limit (Base)</para>
            /// <para>Logical Name = creditlimit_base</para>
            /// </summary>
            public const string creditlimit_base = "creditlimit_base";

            /// <summary>
            /// <para>Credit Hold</para>
            /// <para>Logical Name = creditonhold</para>
            /// </summary>
            public const string creditonhold = "creditonhold";

            /// <summary>
            /// <para>Logical Name = creditonholdname</para>
            /// </summary>
            public const string creditonholdname = "creditonholdname";

            /// <summary>
            /// <para>Customer Size</para>
            /// <para>Logical Name = customersizecode</para>
            /// </summary>
            public const string customersizecode = "customersizecode";

            /// <summary>
            /// <para>Logical Name = customersizecodename</para>
            /// </summary>
            public const string customersizecodename = "customersizecodename";

            /// <summary>
            /// <para>Relationship Type</para>
            /// <para>Logical Name = customertypecode</para>
            /// </summary>
            public const string customertypecode = "customertypecode";

            /// <summary>
            /// <para>Logical Name = customertypecodename</para>
            /// </summary>
            public const string customertypecodename = "customertypecodename";

            /// <summary>
            /// <para>Price List</para>
            /// <para>Logical Name = defaultpricelevelid</para>
            /// </summary>
            public const string defaultpricelevelid = "defaultpricelevelid";

            /// <summary>
            /// <para>Logical Name = defaultpricelevelidname</para>
            /// </summary>
            public const string defaultpricelevelidname = "defaultpricelevelidname";

            /// <summary>
            /// <para>Description</para>
            /// <para>Logical Name = description</para>
            /// </summary>
            public const string description = "description";

            /// <summary>
            /// <para>Do not allow Bulk Emails</para>
            /// <para>Logical Name = donotbulkemail</para>
            /// </summary>
            public const string donotbulkemail = "donotbulkemail";

            /// <summary>
            /// <para>Logical Name = donotbulkemailname</para>
            /// </summary>
            public const string donotbulkemailname = "donotbulkemailname";

            /// <summary>
            /// <para>Do not allow Bulk Mails</para>
            /// <para>Logical Name = donotbulkpostalmail</para>
            /// </summary>
            public const string donotbulkpostalmail = "donotbulkpostalmail";

            /// <summary>
            /// <para>Logical Name = donotbulkpostalmailname</para>
            /// </summary>
            public const string donotbulkpostalmailname = "donotbulkpostalmailname";

            /// <summary>
            /// <para>Do not allow Emails</para>
            /// <para>Logical Name = donotemail</para>
            /// </summary>
            public const string donotemail = "donotemail";

            /// <summary>
            /// <para>Logical Name = donotemailname</para>
            /// </summary>
            public const string donotemailname = "donotemailname";

            /// <summary>
            /// <para>Do not allow Faxes</para>
            /// <para>Logical Name = donotfax</para>
            /// </summary>
            public const string donotfax = "donotfax";

            /// <summary>
            /// <para>Logical Name = donotfaxname</para>
            /// </summary>
            public const string donotfaxname = "donotfaxname";

            /// <summary>
            /// <para>Do not allow Phone Calls</para>
            /// <para>Logical Name = donotphone</para>
            /// </summary>
            public const string donotphone = "donotphone";

            /// <summary>
            /// <para>Logical Name = donotphonename</para>
            /// </summary>
            public const string donotphonename = "donotphonename";

            /// <summary>
            /// <para>Do not allow Mails</para>
            /// <para>Logical Name = donotpostalmail</para>
            /// </summary>
            public const string donotpostalmail = "donotpostalmail";

            /// <summary>
            /// <para>Logical Name = donotpostalmailname</para>
            /// </summary>
            public const string donotpostalmailname = "donotpostalmailname";

            /// <summary>
            /// <para>Logical Name = donotsendmarketingmaterialname</para>
            /// </summary>
            public const string donotsendmarketingmaterialname = "donotsendmarketingmaterialname";

            /// <summary>
            /// <para>Send Marketing Materials</para>
            /// <para>Logical Name = donotsendmm</para>
            /// </summary>
            public const string donotsendmm = "donotsendmm";

            /// <summary>
            /// <para>Email</para>
            /// <para>Logical Name = emailaddress1</para>
            /// </summary>
            public const string emailaddress1 = "emailaddress1";

            /// <summary>
            /// <para>Email Address 2</para>
            /// <para>Logical Name = emailaddress2</para>
            /// </summary>
            public const string emailaddress2 = "emailaddress2";

            /// <summary>
            /// <para>Email Address 3</para>
            /// <para>Logical Name = emailaddress3</para>
            /// </summary>
            public const string emailaddress3 = "emailaddress3";

            /// <summary>
            /// <para>Default Image</para>
            /// <para>Logical Name = entityimage</para>
            /// </summary>
            public const string entityimage = "entityimage";

            /// <summary>
            /// <para>Logical Name = entityimage_timestamp</para>
            /// </summary>
            public const string entityimage_timestamp = "entityimage_timestamp";

            /// <summary>
            /// <para>Logical Name = entityimage_url</para>
            /// </summary>
            public const string entityimage_url = "entityimage_url";

            /// <summary>
            /// <para>Entity Image Id</para>
            /// <para>Logical Name = entityimageid</para>
            /// </summary>
            public const string entityimageid = "entityimageid";

            /// <summary>
            /// <para>Exchange Rate</para>
            /// <para>Logical Name = exchangerate</para>
            /// </summary>
            public const string exchangerate = "exchangerate";

            /// <summary>
            /// <para>Fax</para>
            /// <para>Logical Name = fax</para>
            /// </summary>
            public const string fax = "fax";

            /// <summary>
            /// <para>Follow Email Activity</para>
            /// <para>Logical Name = followemail</para>
            /// </summary>
            public const string followemail = "followemail";

            /// <summary>
            /// <para>Logical Name = followemailname</para>
            /// </summary>
            public const string followemailname = "followemailname";

            /// <summary>
            /// <para>FTP Site</para>
            /// <para>Logical Name = ftpsiteurl</para>
            /// </summary>
            public const string ftpsiteurl = "ftpsiteurl";

            /// <summary>
            /// <para>Import Sequence Number</para>
            /// <para>Logical Name = importsequencenumber</para>
            /// </summary>
            public const string importsequencenumber = "importsequencenumber";

            /// <summary>
            /// <para>Industry</para>
            /// <para>Logical Name = industrycode</para>
            /// </summary>
            public const string industrycode = "industrycode";

            /// <summary>
            /// <para>Logical Name = industrycodename</para>
            /// </summary>
            public const string industrycodename = "industrycodename";

            /// <summary>
            /// <para>Logical Name = isprivate</para>
            /// </summary>
            public const string isprivate = "isprivate";

            /// <summary>
            /// <para>Logical Name = isprivatename</para>
            /// </summary>
            public const string isprivatename = "isprivatename";

            /// <summary>
            /// <para>Last On Hold Time</para>
            /// <para>Logical Name = lastonholdtime</para>
            /// </summary>
            public const string lastonholdtime = "lastonholdtime";

            /// <summary>
            /// <para>Last Date Included in Campaign</para>
            /// <para>Logical Name = lastusedincampaign</para>
            /// </summary>
            public const string lastusedincampaign = "lastusedincampaign";

            /// <summary>
            /// <para>Market Capitalization</para>
            /// <para>Logical Name = marketcap</para>
            /// </summary>
            public const string marketcap = "marketcap";

            /// <summary>
            /// <para>Market Capitalization (Base)</para>
            /// <para>Logical Name = marketcap_base</para>
            /// </summary>
            public const string marketcap_base = "marketcap_base";

            /// <summary>
            /// <para>Marketing Only</para>
            /// <para>Logical Name = marketingonly</para>
            /// </summary>
            public const string marketingonly = "marketingonly";

            /// <summary>
            /// <para>Logical Name = marketingonlyname</para>
            /// </summary>
            public const string marketingonlyname = "marketingonlyname";

            /// <summary>
            /// <para>Logical Name = masteraccountidname</para>
            /// </summary>
            public const string masteraccountidname = "masteraccountidname";

            /// <summary>
            /// <para>Logical Name = masteraccountidyominame</para>
            /// </summary>
            public const string masteraccountidyominame = "masteraccountidyominame";

            /// <summary>
            /// <para>Master ID</para>
            /// <para>Logical Name = masterid</para>
            /// </summary>
            public const string masterid = "masterid";

            /// <summary>
            /// <para>Merged</para>
            /// <para>Logical Name = merged</para>
            /// </summary>
            public const string merged = "merged";

            /// <summary>
            /// <para>Logical Name = mergedname</para>
            /// </summary>
            public const string mergedname = "mergedname";

            /// <summary>
            /// <para>Modified By</para>
            /// <para>Logical Name = modifiedby</para>
            /// </summary>
            public const string modifiedby = "modifiedby";

            /// <summary>
            /// <para>Modified By (External Party)</para>
            /// <para>Logical Name = modifiedbyexternalparty</para>
            /// </summary>
            public const string modifiedbyexternalparty = "modifiedbyexternalparty";

            /// <summary>
            /// <para>Logical Name = modifiedbyexternalpartyname</para>
            /// </summary>
            public const string modifiedbyexternalpartyname = "modifiedbyexternalpartyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyexternalpartyyominame</para>
            /// </summary>
            public const string modifiedbyexternalpartyyominame = "modifiedbyexternalpartyyominame";

            /// <summary>
            /// <para>Logical Name = modifiedbyname</para>
            /// </summary>
            public const string modifiedbyname = "modifiedbyname";

            /// <summary>
            /// <para>Logical Name = modifiedbyyominame</para>
            /// </summary>
            public const string modifiedbyyominame = "modifiedbyyominame";

            /// <summary>
            /// <para>Modified On</para>
            /// <para>Logical Name = modifiedon</para>
            /// </summary>
            public const string modifiedon = "modifiedon";

            /// <summary>
            /// <para>Modified By (Delegate)</para>
            /// <para>Logical Name = modifiedonbehalfby</para>
            /// </summary>
            public const string modifiedonbehalfby = "modifiedonbehalfby";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyname</para>
            /// </summary>
            public const string modifiedonbehalfbyname = "modifiedonbehalfbyname";

            /// <summary>
            /// <para>Logical Name = modifiedonbehalfbyyominame</para>
            /// </summary>
            public const string modifiedonbehalfbyyominame = "modifiedonbehalfbyyominame";

            /// <summary>
            /// <para>Account Name</para>
            /// <para>Logical Name = name</para>
            /// </summary>
            public const string name = "name";

            /// <summary>
            /// <para>Number of Employees</para>
            /// <para>Logical Name = numberofemployees</para>
            /// </summary>
            public const string numberofemployees = "numberofemployees";

            /// <summary>
            /// <para>On Hold Time (Minutes)</para>
            /// <para>Logical Name = onholdtime</para>
            /// </summary>
            public const string onholdtime = "onholdtime";

            /// <summary>
            /// <para>Open Deals</para>
            /// <para>Logical Name = opendeals</para>
            /// </summary>
            public const string opendeals = "opendeals";

            /// <summary>
            /// <para>Open Deals (Last Updated On)</para>
            /// <para>Logical Name = opendeals_date</para>
            /// </summary>
            public const string opendeals_date = "opendeals_date";

            /// <summary>
            /// <para>Open Deals (State)</para>
            /// <para>Logical Name = opendeals_state</para>
            /// </summary>
            public const string opendeals_state = "opendeals_state";

            /// <summary>
            /// <para>Open Revenue</para>
            /// <para>Logical Name = openrevenue</para>
            /// </summary>
            public const string openrevenue = "openrevenue";

            /// <summary>
            /// <para>Open Revenue (Base)</para>
            /// <para>Logical Name = openrevenue_base</para>
            /// </summary>
            public const string openrevenue_base = "openrevenue_base";

            /// <summary>
            /// <para>Open Revenue (Last Updated On)</para>
            /// <para>Logical Name = openrevenue_date</para>
            /// </summary>
            public const string openrevenue_date = "openrevenue_date";

            /// <summary>
            /// <para>Open Revenue (State)</para>
            /// <para>Logical Name = openrevenue_state</para>
            /// </summary>
            public const string openrevenue_state = "openrevenue_state";

            /// <summary>
            /// <para>Originating Lead</para>
            /// <para>Logical Name = originatingleadid</para>
            /// </summary>
            public const string originatingleadid = "originatingleadid";

            /// <summary>
            /// <para>Logical Name = originatingleadidname</para>
            /// </summary>
            public const string originatingleadidname = "originatingleadidname";

            /// <summary>
            /// <para>Logical Name = originatingleadidyominame</para>
            /// </summary>
            public const string originatingleadidyominame = "originatingleadidyominame";

            /// <summary>
            /// <para>Record Created On</para>
            /// <para>Logical Name = overriddencreatedon</para>
            /// </summary>
            public const string overriddencreatedon = "overriddencreatedon";

            /// <summary>
            /// <para>Owner</para>
            /// <para>Logical Name = ownerid</para>
            /// </summary>
            public const string ownerid = "ownerid";

            /// <summary>
            /// <para>Logical Name = owneridname</para>
            /// </summary>
            public const string owneridname = "owneridname";

            /// <summary>
            /// <para>Logical Name = owneridtype</para>
            /// </summary>
            public const string owneridtype = "owneridtype";

            /// <summary>
            /// <para>Logical Name = owneridyominame</para>
            /// </summary>
            public const string owneridyominame = "owneridyominame";

            /// <summary>
            /// <para>Ownership</para>
            /// <para>Logical Name = ownershipcode</para>
            /// </summary>
            public const string ownershipcode = "ownershipcode";

            /// <summary>
            /// <para>Logical Name = ownershipcodename</para>
            /// </summary>
            public const string ownershipcodename = "ownershipcodename";

            /// <summary>
            /// <para>Owning Business Unit</para>
            /// <para>Logical Name = owningbusinessunit</para>
            /// </summary>
            public const string owningbusinessunit = "owningbusinessunit";

            /// <summary>
            /// <para>Owning Team</para>
            /// <para>Logical Name = owningteam</para>
            /// </summary>
            public const string owningteam = "owningteam";

            /// <summary>
            /// <para>Owning User</para>
            /// <para>Logical Name = owninguser</para>
            /// </summary>
            public const string owninguser = "owninguser";

            /// <summary>
            /// <para>Parent Account</para>
            /// <para>Logical Name = parentaccountid</para>
            /// </summary>
            public const string parentaccountid = "parentaccountid";

            /// <summary>
            /// <para>Logical Name = parentaccountidname</para>
            /// </summary>
            public const string parentaccountidname = "parentaccountidname";

            /// <summary>
            /// <para>Logical Name = parentaccountidyominame</para>
            /// </summary>
            public const string parentaccountidyominame = "parentaccountidyominame";

            /// <summary>
            /// <para>Participates in Workflow</para>
            /// <para>Logical Name = participatesinworkflow</para>
            /// </summary>
            public const string participatesinworkflow = "participatesinworkflow";

            /// <summary>
            /// <para>Logical Name = participatesinworkflowname</para>
            /// </summary>
            public const string participatesinworkflowname = "participatesinworkflowname";

            /// <summary>
            /// <para>Payment Terms</para>
            /// <para>Logical Name = paymenttermscode</para>
            /// </summary>
            public const string paymenttermscode = "paymenttermscode";

            /// <summary>
            /// <para>Logical Name = paymenttermscodename</para>
            /// </summary>
            public const string paymenttermscodename = "paymenttermscodename";

            /// <summary>
            /// <para>Preferred Day</para>
            /// <para>Logical Name = preferredappointmentdaycode</para>
            /// </summary>
            public const string preferredappointmentdaycode = "preferredappointmentdaycode";

            /// <summary>
            /// <para>Logical Name = preferredappointmentdaycodename</para>
            /// </summary>
            public const string preferredappointmentdaycodename = "preferredappointmentdaycodename";

            /// <summary>
            /// <para>Preferred Time</para>
            /// <para>Logical Name = preferredappointmenttimecode</para>
            /// </summary>
            public const string preferredappointmenttimecode = "preferredappointmenttimecode";

            /// <summary>
            /// <para>Logical Name = preferredappointmenttimecodename</para>
            /// </summary>
            public const string preferredappointmenttimecodename = "preferredappointmenttimecodename";

            /// <summary>
            /// <para>Preferred Method of Contact</para>
            /// <para>Logical Name = preferredcontactmethodcode</para>
            /// </summary>
            public const string preferredcontactmethodcode = "preferredcontactmethodcode";

            /// <summary>
            /// <para>Logical Name = preferredcontactmethodcodename</para>
            /// </summary>
            public const string preferredcontactmethodcodename = "preferredcontactmethodcodename";

            /// <summary>
            /// <para>Preferred Facility/Equipment</para>
            /// <para>Logical Name = preferredequipmentid</para>
            /// </summary>
            public const string preferredequipmentid = "preferredequipmentid";

            /// <summary>
            /// <para>Logical Name = preferredequipmentidname</para>
            /// </summary>
            public const string preferredequipmentidname = "preferredequipmentidname";

            /// <summary>
            /// <para>Preferred Service</para>
            /// <para>Logical Name = preferredserviceid</para>
            /// </summary>
            public const string preferredserviceid = "preferredserviceid";

            /// <summary>
            /// <para>Logical Name = preferredserviceidname</para>
            /// </summary>
            public const string preferredserviceidname = "preferredserviceidname";

            /// <summary>
            /// <para>Preferred User</para>
            /// <para>Logical Name = preferredsystemuserid</para>
            /// </summary>
            public const string preferredsystemuserid = "preferredsystemuserid";

            /// <summary>
            /// <para>Logical Name = preferredsystemuseridname</para>
            /// </summary>
            public const string preferredsystemuseridname = "preferredsystemuseridname";

            /// <summary>
            /// <para>Logical Name = preferredsystemuseridyominame</para>
            /// </summary>
            public const string preferredsystemuseridyominame = "preferredsystemuseridyominame";

            /// <summary>
            /// <para>Primary Contact</para>
            /// <para>Logical Name = primarycontactid</para>
            /// </summary>
            public const string primarycontactid = "primarycontactid";

            /// <summary>
            /// <para>Logical Name = primarycontactidname</para>
            /// </summary>
            public const string primarycontactidname = "primarycontactidname";

            /// <summary>
            /// <para>Logical Name = primarycontactidyominame</para>
            /// </summary>
            public const string primarycontactidyominame = "primarycontactidyominame";

            /// <summary>
            /// <para>Primary Satori ID</para>
            /// <para>Logical Name = primarysatoriid</para>
            /// </summary>
            public const string primarysatoriid = "primarysatoriid";

            /// <summary>
            /// <para>Primary Twitter ID</para>
            /// <para>Logical Name = primarytwitterid</para>
            /// </summary>
            public const string primarytwitterid = "primarytwitterid";

            /// <summary>
            /// <para>Process</para>
            /// <para>Logical Name = processid</para>
            /// </summary>
            public const string processid = "processid";

            /// <summary>
            /// <para>Annual Revenue</para>
            /// <para>Logical Name = revenue</para>
            /// </summary>
            public const string revenue = "revenue";

            /// <summary>
            /// <para>Annual Revenue (Base)</para>
            /// <para>Logical Name = revenue_base</para>
            /// </summary>
            public const string revenue_base = "revenue_base";

            /// <summary>
            /// <para>Shares Outstanding</para>
            /// <para>Logical Name = sharesoutstanding</para>
            /// </summary>
            public const string sharesoutstanding = "sharesoutstanding";

            /// <summary>
            /// <para>Shipping Method</para>
            /// <para>Logical Name = shippingmethodcode</para>
            /// </summary>
            public const string shippingmethodcode = "shippingmethodcode";

            /// <summary>
            /// <para>Logical Name = shippingmethodcodename</para>
            /// </summary>
            public const string shippingmethodcodename = "shippingmethodcodename";

            /// <summary>
            /// <para>SIC Code</para>
            /// <para>Logical Name = sic</para>
            /// </summary>
            public const string sic = "sic";

            /// <summary>
            /// <para>SLA</para>
            /// <para>Logical Name = slaid</para>
            /// </summary>
            public const string slaid = "slaid";

            /// <summary>
            /// <para>Last SLA applied</para>
            /// <para>Logical Name = slainvokedid</para>
            /// </summary>
            public const string slainvokedid = "slainvokedid";

            /// <summary>
            /// <para>Logical Name = slainvokedidname</para>
            /// </summary>
            public const string slainvokedidname = "slainvokedidname";

            /// <summary>
            /// <para>Logical Name = slaname</para>
            /// </summary>
            public const string slaname = "slaname";

            /// <summary>
            /// <para>(Deprecated) Process Stage</para>
            /// <para>Logical Name = stageid</para>
            /// </summary>
            public const string stageid = "stageid";

            /// <summary>
            /// <para>Status</para>
            /// <para>Logical Name = statecode</para>
            /// </summary>
            public const string statecode = "statecode";

            /// <summary>
            /// <para>Logical Name = statecodename</para>
            /// </summary>
            public const string statecodename = "statecodename";

            /// <summary>
            /// <para>Status Reason</para>
            /// <para>Logical Name = statuscode</para>
            /// </summary>
            public const string statuscode = "statuscode";

            /// <summary>
            /// <para>Logical Name = statuscodename</para>
            /// </summary>
            public const string statuscodename = "statuscodename";

            /// <summary>
            /// <para>Stock Exchange</para>
            /// <para>Logical Name = stockexchange</para>
            /// </summary>
            public const string stockexchange = "stockexchange";

            /// <summary>
            /// <para>TeamsFollowed</para>
            /// <para>Logical Name = teamsfollowed</para>
            /// </summary>
            public const string teamsfollowed = "teamsfollowed";

            /// <summary>
            /// <para>Main Phone</para>
            /// <para>Logical Name = telephone1</para>
            /// </summary>
            public const string telephone1 = "telephone1";

            /// <summary>
            /// <para>Other Phone</para>
            /// <para>Logical Name = telephone2</para>
            /// </summary>
            public const string telephone2 = "telephone2";

            /// <summary>
            /// <para>Telephone 3</para>
            /// <para>Logical Name = telephone3</para>
            /// </summary>
            public const string telephone3 = "telephone3";

            /// <summary>
            /// <para>Territory Code</para>
            /// <para>Logical Name = territorycode</para>
            /// </summary>
            public const string territorycode = "territorycode";

            /// <summary>
            /// <para>Logical Name = territorycodename</para>
            /// </summary>
            public const string territorycodename = "territorycodename";

            /// <summary>
            /// <para>Territory</para>
            /// <para>Logical Name = territoryid</para>
            /// </summary>
            public const string territoryid = "territoryid";

            /// <summary>
            /// <para>Logical Name = territoryidname</para>
            /// </summary>
            public const string territoryidname = "territoryidname";

            /// <summary>
            /// <para>Ticker Symbol</para>
            /// <para>Logical Name = tickersymbol</para>
            /// </summary>
            public const string tickersymbol = "tickersymbol";

            /// <summary>
            /// <para>Time Spent by me</para>
            /// <para>Logical Name = timespentbymeonemailandmeetings</para>
            /// </summary>
            public const string timespentbymeonemailandmeetings = "timespentbymeonemailandmeetings";

            /// <summary>
            /// <para>Time Zone Rule Version Number</para>
            /// <para>Logical Name = timezoneruleversionnumber</para>
            /// </summary>
            public const string timezoneruleversionnumber = "timezoneruleversionnumber";

            /// <summary>
            /// <para>Currency</para>
            /// <para>Logical Name = transactioncurrencyid</para>
            /// </summary>
            public const string transactioncurrencyid = "transactioncurrencyid";

            /// <summary>
            /// <para>Logical Name = transactioncurrencyidname</para>
            /// </summary>
            public const string transactioncurrencyidname = "transactioncurrencyidname";

            /// <summary>
            /// <para>(Deprecated) Traversed Path</para>
            /// <para>Logical Name = traversedpath</para>
            /// </summary>
            public const string traversedpath = "traversedpath";

            /// <summary>
            /// <para>UTC Conversion Time Zone Code</para>
            /// <para>Logical Name = utcconversiontimezonecode</para>
            /// </summary>
            public const string utcconversiontimezonecode = "utcconversiontimezonecode";

            /// <summary>
            /// <para>Version Number</para>
            /// <para>Logical Name = versionnumber</para>
            /// </summary>
            public const string versionnumber = "versionnumber";

            /// <summary>
            /// <para>Website</para>
            /// <para>Logical Name = websiteurl</para>
            /// </summary>
            public const string websiteurl = "websiteurl";

            /// <summary>
            /// <para>Yomi Account Name</para>
            /// <para>Logical Name = yominame</para>
            /// </summary>
            public const string yominame = "yominame";

        }

    }
}
